
ConversorADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000246c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025b8  080025b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080025cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080025cc  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009129  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ae  00000000  00000000  0002915e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002b368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ff9  00000000  00000000  0002bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbba  00000000  00000000  00042cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891c3  00000000  00000000  0004e8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000d7ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002560 	.word	0x08002560

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002560 	.word	0x08002560

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fae4 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8ea 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9c2 	bl	80004e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f936 	bl	80003cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000160:	f000 f972 	bl	8000448 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000164:	4b67      	ldr	r3, [pc, #412]	; (8000304 <main+0x1b8>)
 8000166:	2201      	movs	r2, #1
 8000168:	605a      	str	r2, [r3, #4]
	  	  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800016a:	4b66      	ldr	r3, [pc, #408]	; (8000304 <main+0x1b8>)
 800016c:	2200      	movs	r2, #0
 800016e:	609a      	str	r2, [r3, #8]

	  	  sConfigPrivate.Channel = ADC_CHANNEL_9;
 8000170:	4b64      	ldr	r3, [pc, #400]	; (8000304 <main+0x1b8>)
 8000172:	2209      	movs	r2, #9
 8000174:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000176:	4963      	ldr	r1, [pc, #396]	; (8000304 <main+0x1b8>)
 8000178:	4863      	ldr	r0, [pc, #396]	; (8000308 <main+0x1bc>)
 800017a:	f000 fdf5 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 800017e:	4862      	ldr	r0, [pc, #392]	; (8000308 <main+0x1bc>)
 8000180:	f000 fc06 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000184:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000188:	485f      	ldr	r0, [pc, #380]	; (8000308 <main+0x1bc>)
 800018a:	f000 fcdb 	bl	8000b44 <HAL_ADC_PollForConversion>
	  	  HAL_ADC_Stop(&hadc1);
 800018e:	485e      	ldr	r0, [pc, #376]	; (8000308 <main+0x1bc>)
 8000190:	f000 fcac 	bl	8000aec <HAL_ADC_Stop>
	  	  readValue1 = HAL_ADC_GetValue(&hadc1);
 8000194:	485c      	ldr	r0, [pc, #368]	; (8000308 <main+0x1bc>)
 8000196:	f000 fddb 	bl	8000d50 <HAL_ADC_GetValue>
 800019a:	4603      	mov	r3, r0
 800019c:	b29a      	uxth	r2, r3
 800019e:	4b5b      	ldr	r3, [pc, #364]	; (800030c <main+0x1c0>)
 80001a0:	801a      	strh	r2, [r3, #0]

	  	  sConfigPrivate.Channel = ADC_CHANNEL_8;
 80001a2:	4b58      	ldr	r3, [pc, #352]	; (8000304 <main+0x1b8>)
 80001a4:	2208      	movs	r2, #8
 80001a6:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80001a8:	4956      	ldr	r1, [pc, #344]	; (8000304 <main+0x1b8>)
 80001aa:	4857      	ldr	r0, [pc, #348]	; (8000308 <main+0x1bc>)
 80001ac:	f000 fddc 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80001b0:	4855      	ldr	r0, [pc, #340]	; (8000308 <main+0x1bc>)
 80001b2:	f000 fbed 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80001b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001ba:	4853      	ldr	r0, [pc, #332]	; (8000308 <main+0x1bc>)
 80001bc:	f000 fcc2 	bl	8000b44 <HAL_ADC_PollForConversion>
	  	  HAL_ADC_Stop(&hadc1);
 80001c0:	4851      	ldr	r0, [pc, #324]	; (8000308 <main+0x1bc>)
 80001c2:	f000 fc93 	bl	8000aec <HAL_ADC_Stop>
	  	  readValue2 = HAL_ADC_GetValue(&hadc1);
 80001c6:	4850      	ldr	r0, [pc, #320]	; (8000308 <main+0x1bc>)
 80001c8:	f000 fdc2 	bl	8000d50 <HAL_ADC_GetValue>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	4b4f      	ldr	r3, [pc, #316]	; (8000310 <main+0x1c4>)
 80001d2:	801a      	strh	r2, [r3, #0]

	  	  sConfigPrivate.Channel = ADC_CHANNEL_7;
 80001d4:	4b4b      	ldr	r3, [pc, #300]	; (8000304 <main+0x1b8>)
 80001d6:	2207      	movs	r2, #7
 80001d8:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80001da:	494a      	ldr	r1, [pc, #296]	; (8000304 <main+0x1b8>)
 80001dc:	484a      	ldr	r0, [pc, #296]	; (8000308 <main+0x1bc>)
 80001de:	f000 fdc3 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80001e2:	4849      	ldr	r0, [pc, #292]	; (8000308 <main+0x1bc>)
 80001e4:	f000 fbd4 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80001e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001ec:	4846      	ldr	r0, [pc, #280]	; (8000308 <main+0x1bc>)
 80001ee:	f000 fca9 	bl	8000b44 <HAL_ADC_PollForConversion>
	  	  HAL_ADC_Stop(&hadc1);
 80001f2:	4845      	ldr	r0, [pc, #276]	; (8000308 <main+0x1bc>)
 80001f4:	f000 fc7a 	bl	8000aec <HAL_ADC_Stop>
	  	  readValue3 = HAL_ADC_GetValue(&hadc1);
 80001f8:	4843      	ldr	r0, [pc, #268]	; (8000308 <main+0x1bc>)
 80001fa:	f000 fda9 	bl	8000d50 <HAL_ADC_GetValue>
 80001fe:	4603      	mov	r3, r0
 8000200:	b29a      	uxth	r2, r3
 8000202:	4b44      	ldr	r3, [pc, #272]	; (8000314 <main+0x1c8>)
 8000204:	801a      	strh	r2, [r3, #0]

	  	  sConfigPrivate.Channel = ADC_CHANNEL_6;
 8000206:	4b3f      	ldr	r3, [pc, #252]	; (8000304 <main+0x1b8>)
 8000208:	2206      	movs	r2, #6
 800020a:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800020c:	493d      	ldr	r1, [pc, #244]	; (8000304 <main+0x1b8>)
 800020e:	483e      	ldr	r0, [pc, #248]	; (8000308 <main+0x1bc>)
 8000210:	f000 fdaa 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000214:	483c      	ldr	r0, [pc, #240]	; (8000308 <main+0x1bc>)
 8000216:	f000 fbbb 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800021a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021e:	483a      	ldr	r0, [pc, #232]	; (8000308 <main+0x1bc>)
 8000220:	f000 fc90 	bl	8000b44 <HAL_ADC_PollForConversion>
	  	  HAL_ADC_Stop(&hadc1);
 8000224:	4838      	ldr	r0, [pc, #224]	; (8000308 <main+0x1bc>)
 8000226:	f000 fc61 	bl	8000aec <HAL_ADC_Stop>
	  	  readValue4 = HAL_ADC_GetValue(&hadc1);
 800022a:	4837      	ldr	r0, [pc, #220]	; (8000308 <main+0x1bc>)
 800022c:	f000 fd90 	bl	8000d50 <HAL_ADC_GetValue>
 8000230:	4603      	mov	r3, r0
 8000232:	b29a      	uxth	r2, r3
 8000234:	4b38      	ldr	r3, [pc, #224]	; (8000318 <main+0x1cc>)
 8000236:	801a      	strh	r2, [r3, #0]

	  	sConfigPrivate.Channel = ADC_CHANNEL_5;
 8000238:	4b32      	ldr	r3, [pc, #200]	; (8000304 <main+0x1b8>)
 800023a:	2205      	movs	r2, #5
 800023c:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800023e:	4931      	ldr	r1, [pc, #196]	; (8000304 <main+0x1b8>)
 8000240:	4831      	ldr	r0, [pc, #196]	; (8000308 <main+0x1bc>)
 8000242:	f000 fd91 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000246:	4830      	ldr	r0, [pc, #192]	; (8000308 <main+0x1bc>)
 8000248:	f000 fba2 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800024c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000250:	482d      	ldr	r0, [pc, #180]	; (8000308 <main+0x1bc>)
 8000252:	f000 fc77 	bl	8000b44 <HAL_ADC_PollForConversion>
	  	  HAL_ADC_Stop(&hadc1);
 8000256:	482c      	ldr	r0, [pc, #176]	; (8000308 <main+0x1bc>)
 8000258:	f000 fc48 	bl	8000aec <HAL_ADC_Stop>
	  	  readValue5 = HAL_ADC_GetValue(&hadc1);
 800025c:	482a      	ldr	r0, [pc, #168]	; (8000308 <main+0x1bc>)
 800025e:	f000 fd77 	bl	8000d50 <HAL_ADC_GetValue>
 8000262:	4603      	mov	r3, r0
 8000264:	b29a      	uxth	r2, r3
 8000266:	4b2d      	ldr	r3, [pc, #180]	; (800031c <main+0x1d0>)
 8000268:	801a      	strh	r2, [r3, #0]

	    sConfigPrivate.Channel = ADC_CHANNEL_4;
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <main+0x1b8>)
 800026c:	2204      	movs	r2, #4
 800026e:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000270:	4924      	ldr	r1, [pc, #144]	; (8000304 <main+0x1b8>)
 8000272:	4825      	ldr	r0, [pc, #148]	; (8000308 <main+0x1bc>)
 8000274:	f000 fd78 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000278:	4823      	ldr	r0, [pc, #140]	; (8000308 <main+0x1bc>)
 800027a:	f000 fb89 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800027e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000282:	4821      	ldr	r0, [pc, #132]	; (8000308 <main+0x1bc>)
 8000284:	f000 fc5e 	bl	8000b44 <HAL_ADC_PollForConversion>
	      HAL_ADC_Stop(&hadc1);
 8000288:	481f      	ldr	r0, [pc, #124]	; (8000308 <main+0x1bc>)
 800028a:	f000 fc2f 	bl	8000aec <HAL_ADC_Stop>
	  	  readValue6 = HAL_ADC_GetValue(&hadc1);
 800028e:	481e      	ldr	r0, [pc, #120]	; (8000308 <main+0x1bc>)
 8000290:	f000 fd5e 	bl	8000d50 <HAL_ADC_GetValue>
 8000294:	4603      	mov	r3, r0
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <main+0x1d4>)
 800029a:	801a      	strh	r2, [r3, #0]

	    sConfigPrivate.Channel = ADC_CHANNEL_3;
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <main+0x1b8>)
 800029e:	2203      	movs	r2, #3
 80002a0:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80002a2:	4918      	ldr	r1, [pc, #96]	; (8000304 <main+0x1b8>)
 80002a4:	4818      	ldr	r0, [pc, #96]	; (8000308 <main+0x1bc>)
 80002a6:	f000 fd5f 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80002aa:	4817      	ldr	r0, [pc, #92]	; (8000308 <main+0x1bc>)
 80002ac:	f000 fb70 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80002b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002b4:	4814      	ldr	r0, [pc, #80]	; (8000308 <main+0x1bc>)
 80002b6:	f000 fc45 	bl	8000b44 <HAL_ADC_PollForConversion>
	  	  HAL_ADC_Stop(&hadc1);
 80002ba:	4813      	ldr	r0, [pc, #76]	; (8000308 <main+0x1bc>)
 80002bc:	f000 fc16 	bl	8000aec <HAL_ADC_Stop>
	  	  readValue7 = HAL_ADC_GetValue(&hadc1);
 80002c0:	4811      	ldr	r0, [pc, #68]	; (8000308 <main+0x1bc>)
 80002c2:	f000 fd45 	bl	8000d50 <HAL_ADC_GetValue>
 80002c6:	4603      	mov	r3, r0
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0x1d8>)
 80002cc:	801a      	strh	r2, [r3, #0]

	    sConfigPrivate.Channel = ADC_CHANNEL_2;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <main+0x1b8>)
 80002d0:	2202      	movs	r2, #2
 80002d2:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80002d4:	490b      	ldr	r1, [pc, #44]	; (8000304 <main+0x1b8>)
 80002d6:	480c      	ldr	r0, [pc, #48]	; (8000308 <main+0x1bc>)
 80002d8:	f000 fd46 	bl	8000d68 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80002dc:	480a      	ldr	r0, [pc, #40]	; (8000308 <main+0x1bc>)
 80002de:	f000 fb57 	bl	8000990 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80002e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002e6:	4808      	ldr	r0, [pc, #32]	; (8000308 <main+0x1bc>)
 80002e8:	f000 fc2c 	bl	8000b44 <HAL_ADC_PollForConversion>
	      HAL_ADC_Stop(&hadc1);
 80002ec:	4806      	ldr	r0, [pc, #24]	; (8000308 <main+0x1bc>)
 80002ee:	f000 fbfd 	bl	8000aec <HAL_ADC_Stop>
	      readValue8 = HAL_ADC_GetValue(&hadc1);
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <main+0x1bc>)
 80002f4:	f000 fd2c 	bl	8000d50 <HAL_ADC_GetValue>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <main+0x1dc>)
 80002fe:	801a      	strh	r2, [r3, #0]
	  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000300:	e730      	b.n	8000164 <main+0x18>
 8000302:	bf00      	nop
 8000304:	200000b0 	.word	0x200000b0
 8000308:	20000028 	.word	0x20000028
 800030c:	200000a0 	.word	0x200000a0
 8000310:	200000a2 	.word	0x200000a2
 8000314:	200000a4 	.word	0x200000a4
 8000318:	200000a6 	.word	0x200000a6
 800031c:	200000a8 	.word	0x200000a8
 8000320:	200000aa 	.word	0x200000aa
 8000324:	200000ac 	.word	0x200000ac
 8000328:	200000ae 	.word	0x200000ae

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b094      	sub	sp, #80	; 0x50
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 f908 	bl	8002550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	2302      	movs	r3, #2
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000364:	2310      	movs	r3, #16
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000368:	2300      	movs	r3, #0
 800036a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000370:	4618      	mov	r0, r3
 8000372:	f001 f8f5 	bl	8001560 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800037c:	f000 f8d2 	bl	8000524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000394:	f107 0314 	add.w	r3, r7, #20
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fb62 	bl	8001a64 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003a6:	f000 f8bd 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003aa:	2302      	movs	r3, #2
 80003ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fccf 	bl	8001d58 <HAL_RCCEx_PeriphCLKConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003c0:	f000 f8b0 	bl	8000524 <Error_Handler>
  }
}
 80003c4:	bf00      	nop
 80003c6:	3750      	adds	r7, #80	; 0x50
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_ADC1_Init+0x74>)
 80003de:	4a19      	ldr	r2, [pc, #100]	; (8000444 <MX_ADC1_Init+0x78>)
 80003e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_ADC1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_ADC1_Init+0x74>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_ADC1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_ADC1_Init+0x74>)
 80003f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_ADC1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_ADC1_Init+0x74>)
 8000404:	2201      	movs	r2, #1
 8000406:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000408:	480d      	ldr	r0, [pc, #52]	; (8000440 <MX_ADC1_Init+0x74>)
 800040a:	f000 f9e9 	bl	80007e0 <HAL_ADC_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000414:	f000 f886 	bl	8000524 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000418:	2302      	movs	r3, #2
 800041a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041c:	2301      	movs	r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	4619      	mov	r1, r3
 8000428:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_ADC1_Init+0x74>)
 800042a:	f000 fc9d 	bl	8000d68 <HAL_ADC_ConfigChannel>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000434:	f000 f876 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000028 	.word	0x20000028
 8000444:	40012400 	.word	0x40012400

08000448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000464:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <MX_TIM2_Init+0x94>)
 8000466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_TIM2_Init+0x94>)
 800046e:	227f      	movs	r2, #127	; 0x7f
 8000470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_TIM2_Init+0x94>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_TIM2_Init+0x94>)
 800047a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800047e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_TIM2_Init+0x94>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_TIM2_Init+0x94>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800048c:	4813      	ldr	r0, [pc, #76]	; (80004dc <MX_TIM2_Init+0x94>)
 800048e:	f001 fdcf 	bl	8002030 <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000498:	f000 f844 	bl	8000524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	4619      	mov	r1, r3
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_TIM2_Init+0x94>)
 80004aa:	f001 fe10 	bl	80020ce <HAL_TIM_ConfigClockSource>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004b4:	f000 f836 	bl	8000524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b8:	2300      	movs	r3, #0
 80004ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c0:	463b      	mov	r3, r7
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_TIM2_Init+0x94>)
 80004c6:	f001 ffc1 	bl	800244c <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004d0:	f000 f828 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000058 	.word	0x20000058

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_GPIO_Init+0x40>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <MX_GPIO_Init+0x40>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_GPIO_Init+0x40>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_GPIO_Init+0x40>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <MX_GPIO_Init+0x40>)
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <MX_GPIO_Init+0x40>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0308 	and.w	r3, r3, #8
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <HAL_MspInit+0x5c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a0e      	ldr	r2, [pc, #56]	; (800058c <HAL_MspInit+0x5c>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <HAL_MspInit+0x60>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_MspInit+0x60>)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000
 8000590:	40010000 	.word	0x40010000

08000594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a1f      	ldr	r2, [pc, #124]	; (800062c <HAL_ADC_MspInit+0x98>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d137      	bne.n	8000624 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_ADC_MspInit+0x9c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0308 	and.w	r3, r3, #8
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80005fc:	23fc      	movs	r3, #252	; 0xfc
 80005fe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000600:	2303      	movs	r3, #3
 8000602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	4619      	mov	r1, r3
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <HAL_ADC_MspInit+0xa0>)
 800060c:	f000 fe24 	bl	8001258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000610:	2303      	movs	r3, #3
 8000612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0318 	add.w	r3, r7, #24
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <HAL_ADC_MspInit+0xa4>)
 8000620:	f000 fe1a 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000624:	bf00      	nop
 8000626:	3728      	adds	r7, #40	; 0x28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40012400 	.word	0x40012400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00

0800063c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800064c:	d10b      	bne.n	8000666 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_TIM_Base_MspInit+0x34>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_TIM_Base_MspInit+0x34>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_TIM_Base_MspInit+0x34>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ba:	f000 f875 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d0:	f7ff fff7 	bl	80006c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006d6:	490c      	ldr	r1, [pc, #48]	; (8000708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ec:	4c09      	ldr	r4, [pc, #36]	; (8000714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fa:	f001 ff05 	bl	8002508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd25 	bl	800014c <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	080025c0 	.word	0x080025c0
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	200000c0 	.word	0x200000c0

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 fd5f 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fefa 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fd69 	bl	800123e <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 fd3f 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000008 	.word	0x20000008
 80007c8:	200000bc 	.word	0x200000bc

080007cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	200000bc 	.word	0x200000bc

080007e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e8:	2300      	movs	r3, #0
 80007ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e0be      	b.n	8000980 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	2b00      	cmp	r3, #0
 800080e:	d109      	bne.n	8000824 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff feb8 	bl	8000594 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 fbf1 	bl	800100c <ADC_ConversionStop_Disable>
 800082a:	4603      	mov	r3, r0
 800082c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	2b00      	cmp	r3, #0
 8000838:	f040 8099 	bne.w	800096e <HAL_ADC_Init+0x18e>
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	2b00      	cmp	r3, #0
 8000840:	f040 8095 	bne.w	800096e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800084c:	f023 0302 	bic.w	r3, r3, #2
 8000850:	f043 0202 	orr.w	r2, r3, #2
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000860:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7b1b      	ldrb	r3, [r3, #12]
 8000866:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000868:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	4313      	orrs	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000878:	d003      	beq.n	8000882 <HAL_ADC_Init+0xa2>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d102      	bne.n	8000888 <HAL_ADC_Init+0xa8>
 8000882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000886:	e000      	b.n	800088a <HAL_ADC_Init+0xaa>
 8000888:	2300      	movs	r3, #0
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7d1b      	ldrb	r3, [r3, #20]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d119      	bne.n	80008cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7b1b      	ldrb	r3, [r3, #12]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	035a      	lsls	r2, r3, #13
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	e00b      	b.n	80008cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b8:	f043 0220 	orr.w	r2, r3, #32
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	f043 0201 	orr.w	r2, r3, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	430a      	orrs	r2, r1
 80008de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_ADC_Init+0x1a8>)
 80008e8:	4013      	ands	r3, r2
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	68b9      	ldr	r1, [r7, #8]
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008fc:	d003      	beq.n	8000906 <HAL_ADC_Init+0x126>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d104      	bne.n	8000910 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	3b01      	subs	r3, #1
 800090c:	051b      	lsls	r3, r3, #20
 800090e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000916:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	430a      	orrs	r2, r1
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_ADC_Init+0x1ac>)
 800092c:	4013      	ands	r3, r2
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	429a      	cmp	r2, r3
 8000932:	d10b      	bne.n	800094c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093e:	f023 0303 	bic.w	r3, r3, #3
 8000942:	f043 0201 	orr.w	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800094a:	e018      	b.n	800097e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	f023 0312 	bic.w	r3, r3, #18
 8000954:	f043 0210 	orr.w	r2, r3, #16
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000960:	f043 0201 	orr.w	r2, r3, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800096c:	e007      	b.n	800097e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000972:	f043 0210 	orr.w	r2, r3, #16
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800097e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	ffe1f7fd 	.word	0xffe1f7fd
 800098c:	ff1f0efe 	.word	0xff1f0efe

08000990 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <HAL_ADC_Start+0x1a>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e098      	b.n	8000adc <HAL_ADC_Start+0x14c>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 fad0 	bl	8000f58 <ADC_Enable>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f040 8087 	bne.w	8000ad2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009cc:	f023 0301 	bic.w	r3, r3, #1
 80009d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a41      	ldr	r2, [pc, #260]	; (8000ae4 <HAL_ADC_Start+0x154>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d105      	bne.n	80009ee <HAL_ADC_Start+0x5e>
 80009e2:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <HAL_ADC_Start+0x158>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d115      	bne.n	8000a1a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d026      	beq.n	8000a56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a18:	e01d      	b.n	8000a56 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <HAL_ADC_Start+0x158>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d004      	beq.n	8000a3a <HAL_ADC_Start+0xaa>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <HAL_ADC_Start+0x154>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10d      	bne.n	8000a56 <HAL_ADC_Start+0xc6>
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <HAL_ADC_Start+0x158>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a66:	f023 0206 	bic.w	r2, r3, #6
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6e:	e002      	b.n	8000a76 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f06f 0202 	mvn.w	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a96:	d113      	bne.n	8000ac0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a9c:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <HAL_ADC_Start+0x154>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d105      	bne.n	8000aae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_ADC_Start+0x158>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d108      	bne.n	8000ac0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	e00c      	b.n	8000ada <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	e003      	b.n	8000ada <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40012800 	.word	0x40012800
 8000ae8:	40012400 	.word	0x40012400

08000aec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_Stop+0x1a>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e01a      	b.n	8000b3c <HAL_ADC_Stop+0x50>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 fa7c 	bl	800100c <ADC_ConversionStop_Disable>
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d109      	bne.n	8000b32 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b26:	f023 0301 	bic.w	r3, r3, #1
 8000b2a:	f043 0201 	orr.w	r2, r3, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b5a:	f7ff fe37 	bl	80007cc <HAL_GetTick>
 8000b5e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00b      	beq.n	8000b86 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	f043 0220 	orr.w	r2, r3, #32
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e0d3      	b.n	8000d2e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d131      	bne.n	8000bf8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d12a      	bne.n	8000bf8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ba2:	e021      	b.n	8000be8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000baa:	d01d      	beq.n	8000be8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d007      	beq.n	8000bc2 <HAL_ADC_PollForConversion+0x7e>
 8000bb2:	f7ff fe0b 	bl	80007cc <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d212      	bcs.n	8000be8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10b      	bne.n	8000be8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f043 0204 	orr.w	r2, r3, #4
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e0a2      	b.n	8000d2e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0d6      	beq.n	8000ba4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bf6:	e070      	b.n	8000cda <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000bf8:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <HAL_ADC_PollForConversion+0x1f4>)
 8000bfa:	681c      	ldr	r4, [r3, #0]
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f001 f961 	bl	8001ec4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c02:	4603      	mov	r3, r0
 8000c04:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6919      	ldr	r1, [r3, #16]
 8000c0e:	4b4b      	ldr	r3, [pc, #300]	; (8000d3c <HAL_ADC_PollForConversion+0x1f8>)
 8000c10:	400b      	ands	r3, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d118      	bne.n	8000c48 <HAL_ADC_PollForConversion+0x104>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68d9      	ldr	r1, [r3, #12]
 8000c1c:	4b48      	ldr	r3, [pc, #288]	; (8000d40 <HAL_ADC_PollForConversion+0x1fc>)
 8000c1e:	400b      	ands	r3, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d111      	bne.n	8000c48 <HAL_ADC_PollForConversion+0x104>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6919      	ldr	r1, [r3, #16]
 8000c2a:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <HAL_ADC_PollForConversion+0x200>)
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d108      	bne.n	8000c44 <HAL_ADC_PollForConversion+0x100>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68d9      	ldr	r1, [r3, #12]
 8000c38:	4b43      	ldr	r3, [pc, #268]	; (8000d48 <HAL_ADC_PollForConversion+0x204>)
 8000c3a:	400b      	ands	r3, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <HAL_ADC_PollForConversion+0x100>
 8000c40:	2314      	movs	r3, #20
 8000c42:	e020      	b.n	8000c86 <HAL_ADC_PollForConversion+0x142>
 8000c44:	2329      	movs	r3, #41	; 0x29
 8000c46:	e01e      	b.n	8000c86 <HAL_ADC_PollForConversion+0x142>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6919      	ldr	r1, [r3, #16]
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <HAL_ADC_PollForConversion+0x200>)
 8000c50:	400b      	ands	r3, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d106      	bne.n	8000c64 <HAL_ADC_PollForConversion+0x120>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68d9      	ldr	r1, [r3, #12]
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <HAL_ADC_PollForConversion+0x204>)
 8000c5e:	400b      	ands	r3, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00d      	beq.n	8000c80 <HAL_ADC_PollForConversion+0x13c>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6919      	ldr	r1, [r3, #16]
 8000c6a:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <HAL_ADC_PollForConversion+0x208>)
 8000c6c:	400b      	ands	r3, r1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d108      	bne.n	8000c84 <HAL_ADC_PollForConversion+0x140>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68d9      	ldr	r1, [r3, #12]
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_ADC_PollForConversion+0x208>)
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_ADC_PollForConversion+0x140>
 8000c80:	2354      	movs	r3, #84	; 0x54
 8000c82:	e000      	b.n	8000c86 <HAL_ADC_PollForConversion+0x142>
 8000c84:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c8c:	e021      	b.n	8000cd2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d01a      	beq.n	8000ccc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <HAL_ADC_PollForConversion+0x168>
 8000c9c:	f7ff fd96 	bl	80007cc <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d20f      	bcs.n	8000ccc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d90b      	bls.n	8000ccc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f043 0204 	orr.w	r2, r3, #4
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e030      	b.n	8000d2e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d8d9      	bhi.n	8000c8e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f06f 0212 	mvn.w	r2, #18
 8000ce2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cfa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cfe:	d115      	bne.n	8000d2c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d111      	bne.n	8000d2c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	24924924 	.word	0x24924924
 8000d40:	00924924 	.word	0x00924924
 8000d44:	12492492 	.word	0x12492492
 8000d48:	00492492 	.word	0x00492492
 8000d4c:	00249249 	.word	0x00249249

08000d50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <HAL_ADC_ConfigChannel+0x20>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e0dc      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x1da>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	d81c      	bhi.n	8000dd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	3b05      	subs	r3, #5
 8000daa:	221f      	movs	r2, #31
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4019      	ands	r1, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b05      	subs	r3, #5
 8000dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd0:	e03c      	b.n	8000e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b0c      	cmp	r3, #12
 8000dd8:	d81c      	bhi.n	8000e14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b23      	subs	r3, #35	; 0x23
 8000dec:	221f      	movs	r2, #31
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4019      	ands	r1, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	3b23      	subs	r3, #35	; 0x23
 8000e06:	fa00 f203 	lsl.w	r2, r0, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
 8000e12:	e01b      	b.n	8000e4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	3b41      	subs	r3, #65	; 0x41
 8000e26:	221f      	movs	r2, #31
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4019      	ands	r1, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b41      	subs	r3, #65	; 0x41
 8000e40:	fa00 f203 	lsl.w	r2, r0, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	d91c      	bls.n	8000e8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68d9      	ldr	r1, [r3, #12]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	3b1e      	subs	r3, #30
 8000e66:	2207      	movs	r2, #7
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4019      	ands	r1, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	6898      	ldr	r0, [r3, #8]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3b1e      	subs	r3, #30
 8000e80:	fa00 f203 	lsl.w	r2, r0, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	e019      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6919      	ldr	r1, [r3, #16]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4019      	ands	r1, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6898      	ldr	r0, [r3, #8]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d003      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ece:	2b11      	cmp	r3, #17
 8000ed0:	d132      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d125      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d126      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ef8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b10      	cmp	r3, #16
 8000f00:	d11a      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	0c9a      	lsrs	r2, r3, #18
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f9      	bne.n	8000f1a <HAL_ADC_ConfigChannel+0x1b2>
 8000f26:	e007      	b.n	8000f38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40012400 	.word	0x40012400
 8000f50:	20000000 	.word	0x20000000
 8000f54:	431bde83 	.word	0x431bde83

08000f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d040      	beq.n	8000ff8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <ADC_Enable+0xac>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <ADC_Enable+0xb0>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	0c9b      	lsrs	r3, r3, #18
 8000f92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f94:	e002      	b.n	8000f9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f9      	bne.n	8000f96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fa2:	f7ff fc13 	bl	80007cc <HAL_GetTick>
 8000fa6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fa8:	e01f      	b.n	8000fea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000faa:	f7ff fc0f 	bl	80007cc <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d918      	bls.n	8000fea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d011      	beq.n	8000fea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f043 0210 	orr.w	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e007      	b.n	8000ffa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d1d8      	bne.n	8000faa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000000 	.word	0x20000000
 8001008:	431bde83 	.word	0x431bde83

0800100c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b01      	cmp	r3, #1
 8001024:	d12e      	bne.n	8001084 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001036:	f7ff fbc9 	bl	80007cc <HAL_GetTick>
 800103a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800103c:	e01b      	b.n	8001076 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800103e:	f7ff fbc5 	bl	80007cc <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d914      	bls.n	8001076 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10d      	bne.n	8001076 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	f043 0210 	orr.w	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e007      	b.n	8001086 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d0dc      	beq.n	800103e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff90 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff49 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff5e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff90 	bl	8001148 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5f 	bl	80010f4 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffb0 	bl	80011ac <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e169      	b.n	8001540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800126c:	2201      	movs	r2, #1
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	429a      	cmp	r2, r3
 8001286:	f040 8158 	bne.w	800153a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4a9a      	ldr	r2, [pc, #616]	; (80014f8 <HAL_GPIO_Init+0x2a0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d05e      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 8001294:	4a98      	ldr	r2, [pc, #608]	; (80014f8 <HAL_GPIO_Init+0x2a0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d875      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 800129a:	4a98      	ldr	r2, [pc, #608]	; (80014fc <HAL_GPIO_Init+0x2a4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d058      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012a0:	4a96      	ldr	r2, [pc, #600]	; (80014fc <HAL_GPIO_Init+0x2a4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d86f      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012a6:	4a96      	ldr	r2, [pc, #600]	; (8001500 <HAL_GPIO_Init+0x2a8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d052      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012ac:	4a94      	ldr	r2, [pc, #592]	; (8001500 <HAL_GPIO_Init+0x2a8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d869      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012b2:	4a94      	ldr	r2, [pc, #592]	; (8001504 <HAL_GPIO_Init+0x2ac>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d04c      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012b8:	4a92      	ldr	r2, [pc, #584]	; (8001504 <HAL_GPIO_Init+0x2ac>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d863      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012be:	4a92      	ldr	r2, [pc, #584]	; (8001508 <HAL_GPIO_Init+0x2b0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d046      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
 80012c4:	4a90      	ldr	r2, [pc, #576]	; (8001508 <HAL_GPIO_Init+0x2b0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d85d      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d82a      	bhi.n	8001324 <HAL_GPIO_Init+0xcc>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d859      	bhi.n	8001386 <HAL_GPIO_Init+0x12e>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <HAL_GPIO_Init+0x80>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	08001353 	.word	0x08001353
 80012dc:	0800132d 	.word	0x0800132d
 80012e0:	0800133f 	.word	0x0800133f
 80012e4:	08001381 	.word	0x08001381
 80012e8:	08001387 	.word	0x08001387
 80012ec:	08001387 	.word	0x08001387
 80012f0:	08001387 	.word	0x08001387
 80012f4:	08001387 	.word	0x08001387
 80012f8:	08001387 	.word	0x08001387
 80012fc:	08001387 	.word	0x08001387
 8001300:	08001387 	.word	0x08001387
 8001304:	08001387 	.word	0x08001387
 8001308:	08001387 	.word	0x08001387
 800130c:	08001387 	.word	0x08001387
 8001310:	08001387 	.word	0x08001387
 8001314:	08001387 	.word	0x08001387
 8001318:	08001387 	.word	0x08001387
 800131c:	08001335 	.word	0x08001335
 8001320:	08001349 	.word	0x08001349
 8001324:	4a79      	ldr	r2, [pc, #484]	; (800150c <HAL_GPIO_Init+0x2b4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132a:	e02c      	b.n	8001386 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e029      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	3304      	adds	r3, #4
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e024      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	3308      	adds	r3, #8
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e01f      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	330c      	adds	r3, #12
 800134e:	623b      	str	r3, [r7, #32]
          break;
 8001350:	e01a      	b.n	8001388 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800135a:	2304      	movs	r3, #4
 800135c:	623b      	str	r3, [r7, #32]
          break;
 800135e:	e013      	b.n	8001388 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d105      	bne.n	8001374 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001368:	2308      	movs	r3, #8
 800136a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
          break;
 8001372:	e009      	b.n	8001388 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	615a      	str	r2, [r3, #20]
          break;
 800137e:	e003      	b.n	8001388 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x130>
          break;
 8001386:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2bff      	cmp	r3, #255	; 0xff
 800138c:	d801      	bhi.n	8001392 <HAL_GPIO_Init+0x13a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_Init+0x13e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3304      	adds	r3, #4
 8001396:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2bff      	cmp	r3, #255	; 0xff
 800139c:	d802      	bhi.n	80013a4 <HAL_GPIO_Init+0x14c>
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x152>
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3b08      	subs	r3, #8
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	210f      	movs	r1, #15
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	6a39      	ldr	r1, [r7, #32]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80b1 	beq.w	800153a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_GPIO_Init+0x2b8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x2b8>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_GPIO_Init+0x2b8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f0:	4a48      	ldr	r2, [pc, #288]	; (8001514 <HAL_GPIO_Init+0x2bc>)
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a40      	ldr	r2, [pc, #256]	; (8001518 <HAL_GPIO_Init+0x2c0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d013      	beq.n	8001444 <HAL_GPIO_Init+0x1ec>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a3f      	ldr	r2, [pc, #252]	; (800151c <HAL_GPIO_Init+0x2c4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00d      	beq.n	8001440 <HAL_GPIO_Init+0x1e8>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d007      	beq.n	800143c <HAL_GPIO_Init+0x1e4>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <HAL_GPIO_Init+0x2cc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_GPIO_Init+0x1e0>
 8001434:	2303      	movs	r3, #3
 8001436:	e006      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001438:	2304      	movs	r3, #4
 800143a:	e004      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 800143c:	2302      	movs	r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_GPIO_Init+0x1ee>
 8001444:	2300      	movs	r3, #0
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001456:	492f      	ldr	r1, [pc, #188]	; (8001514 <HAL_GPIO_Init+0x2bc>)
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	492c      	ldr	r1, [pc, #176]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	608b      	str	r3, [r1, #8]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	4928      	ldr	r1, [pc, #160]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001488:	4013      	ands	r3, r2
 800148a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	4922      	ldr	r1, [pc, #136]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60cb      	str	r3, [r1, #12]
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	491e      	ldr	r1, [pc, #120]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4918      	ldr	r1, [pc, #96]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4914      	ldr	r1, [pc, #80]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d021      	beq.n	800152c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e021      	b.n	800153a <HAL_GPIO_Init+0x2e2>
 80014f6:	bf00      	nop
 80014f8:	10320000 	.word	0x10320000
 80014fc:	10310000 	.word	0x10310000
 8001500:	10220000 	.word	0x10220000
 8001504:	10210000 	.word	0x10210000
 8001508:	10120000 	.word	0x10120000
 800150c:	10110000 	.word	0x10110000
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	40011000 	.word	0x40011000
 8001524:	40011400 	.word	0x40011400
 8001528:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_GPIO_Init+0x304>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	43db      	mvns	r3, r3
 8001534:	4909      	ldr	r1, [pc, #36]	; (800155c <HAL_GPIO_Init+0x304>)
 8001536:	4013      	ands	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	f47f ae8e 	bne.w	800126c <HAL_GPIO_Init+0x14>
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	372c      	adds	r7, #44	; 0x2c
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e272      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8087 	beq.w	800168e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800158c:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d112      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
 8001598:	4b8c      	ldr	r3, [pc, #560]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06c      	beq.n	800168c <HAL_RCC_OscConfig+0x12c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d168      	bne.n	800168c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e24c      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x76>
 80015c8:	4b80      	ldr	r3, [pc, #512]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a7f      	ldr	r2, [pc, #508]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e02e      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x98>
 80015de:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7a      	ldr	r2, [pc, #488]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b78      	ldr	r3, [pc, #480]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a77      	ldr	r2, [pc, #476]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0xbc>
 8001602:	4b72      	ldr	r3, [pc, #456]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a71      	ldr	r2, [pc, #452]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a67      	ldr	r2, [pc, #412]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff f8c6 	bl	80007cc <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff f8c2 	bl	80007cc <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e200      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xe4>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff f8b2 	bl	80007cc <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff f8ae 	bl	80007cc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1ec      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x10c>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c0      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4939      	ldr	r1, [pc, #228]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff f867 	bl	80007cc <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff f863 	bl	80007cc <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4927      	ldr	r1, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff f846 	bl	80007cc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff f842 	bl	80007cc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e180      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03a      	beq.n	80017e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff f826 	bl	80007cc <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff f822 	bl	80007cc <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e160      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 faba 	bl	8001d1c <RCC_Delay>
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff f80c 	bl	80007cc <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b6:	e00f      	b.n	80017d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff f808 	bl	80007cc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d908      	bls.n	80017d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e146      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	42420000 	.word	0x42420000
 80017d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b92      	ldr	r3, [pc, #584]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e9      	bne.n	80017b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a6 	beq.w	800193e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10d      	bne.n	800181e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a87      	ldr	r2, [pc, #540]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b85      	ldr	r3, [pc, #532]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b82      	ldr	r3, [pc, #520]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7e      	ldr	r2, [pc, #504]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7fe ffc9 	bl	80007cc <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7fe ffc5 	bl	80007cc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e103      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x4c8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x312>
 8001864:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e02d      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x334>
 800187a:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a69      	ldr	r2, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a66      	ldr	r2, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e01c      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x356>
 800189c:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a60      	ldr	r2, [pc, #384]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e00b      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 80018b6:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a5a      	ldr	r2, [pc, #360]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d015      	beq.n	8001902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7fe ff79 	bl	80007cc <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7fe ff75 	bl	80007cc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0b1      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ee      	beq.n	80018de <HAL_RCC_OscConfig+0x37e>
 8001900:	e014      	b.n	800192c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7fe ff63 	bl	80007cc <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7fe ff5f 	bl	80007cc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e09b      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ee      	bne.n	800190a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a3b      	ldr	r2, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d061      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d146      	bne.n	80019ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7fe ff33 	bl	80007cc <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7fe ff2f 	bl	80007cc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e06d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	4921      	ldr	r1, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a19      	ldr	r1, [r3, #32]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	430b      	orrs	r3, r1
 80019b6:	491b      	ldr	r1, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7fe ff03 	bl	80007cc <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7fe feff 	bl	80007cc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e03d      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x46a>
 80019e8:	e035      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7fe feec 	bl	80007cc <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7fe fee8 	bl	80007cc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e026      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x498>
 8001a16:	e01e      	b.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e019      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_OscConfig+0x500>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d0      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4965      	ldr	r1, [pc, #404]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b8      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	494d      	ldr	r1, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d040      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07f      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e073      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4936      	ldr	r1, [pc, #216]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b54:	f7fe fe3a 	bl	80007cc <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7fe fe36 	bl	80007cc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e053      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d210      	bcs.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4922      	ldr	r1, [pc, #136]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e032      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4916      	ldr	r1, [pc, #88]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bf2:	f000 f821 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1cc>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1d0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fd98 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08002578 	.word	0x08002578
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x30>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x36>
 8001c66:	e027      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c6a:	613b      	str	r3, [r7, #16]
      break;
 8001c6c:	e027      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0c5b      	lsrs	r3, r3, #17
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e004      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	613b      	str	r3, [r7, #16]
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cba:	613b      	str	r3, [r7, #16]
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	693b      	ldr	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	08002590 	.word	0x08002590
 8001cd8:	080025a0 	.word	0x080025a0
 8001cdc:	003d0900 	.word	0x003d0900

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf8:	f7ff fff2 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08002588 	.word	0x08002588

08001d1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <RCC_Delay+0x34>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <RCC_Delay+0x38>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0a5b      	lsrs	r3, r3, #9
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	fb02 f303 	mul.w	r3, r2, r3
 8001d36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d38:	bf00      	nop
  }
  while (Delay --);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	60fa      	str	r2, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <RCC_Delay+0x1c>
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000000 	.word	0x20000000
 8001d54:	10624dd3 	.word	0x10624dd3

08001d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d07d      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d78:	4b4f      	ldr	r3, [pc, #316]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	61d3      	str	r3, [r2, #28]
 8001d90:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dac:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7fe fd08 	bl	80007cc <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7fe fd04 	bl	80007cc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e06d      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d02e      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d027      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e12:	4a29      	ldr	r2, [pc, #164]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d014      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7fe fcd3 	bl	80007cc <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fccf 	bl	80007cc <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e036      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4917      	ldr	r1, [pc, #92]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	490b      	ldr	r1, [pc, #44]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	42420440 	.word	0x42420440

08001ec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	f200 808a 	bhi.w	8002002 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d045      	beq.n	8001f80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d075      	beq.n	8001fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001efa:	e082      	b.n	8002002 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001efc:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f02:	4b45      	ldr	r3, [pc, #276]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07b      	beq.n	8002006 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a41      	ldr	r2, [pc, #260]	; (800201c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f26:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0c5b      	lsrs	r3, r3, #17
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f40:	4a38      	ldr	r2, [pc, #224]	; (8002024 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	e004      	b.n	8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f68:	d102      	bne.n	8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	61bb      	str	r3, [r7, #24]
      break;
 8001f6e:	e04a      	b.n	8002006 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	61bb      	str	r3, [r7, #24]
      break;
 8001f7e:	e042      	b.n	8002006 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001f80:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	e01f      	b.n	8001fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fae:	d109      	bne.n	8001fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001fbc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e00f      	b.n	8001fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fce:	d11c      	bne.n	800200a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d016      	beq.n	800200a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001fdc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001fe0:	61bb      	str	r3, [r7, #24]
      break;
 8001fe2:	e012      	b.n	800200a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001fe4:	e011      	b.n	800200a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001fe6:	f7ff fe85 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0b9b      	lsrs	r3, r3, #14
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	61bb      	str	r3, [r7, #24]
      break;
 8002000:	e004      	b.n	800200c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800200a:	bf00      	nop
    }
  }
  return (frequency);
 800200c:	69bb      	ldr	r3, [r7, #24]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	080025a4 	.word	0x080025a4
 8002020:	080025b4 	.word	0x080025b4
 8002024:	007a1200 	.word	0x007a1200
 8002028:	003d0900 	.word	0x003d0900
 800202c:	aaaaaaab 	.word	0xaaaaaaab

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e041      	b.n	80020c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe faf0 	bl	800063c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f000 f8f4 	bl	800225c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_ConfigClockSource+0x1c>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0b4      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x186>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002108:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002110:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002122:	d03e      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0xd4>
 8002124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002128:	f200 8087 	bhi.w	800223a <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002130:	f000 8086 	beq.w	8002240 <HAL_TIM_ConfigClockSource+0x172>
 8002134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002138:	d87f      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
 800213a:	2b70      	cmp	r3, #112	; 0x70
 800213c:	d01a      	beq.n	8002174 <HAL_TIM_ConfigClockSource+0xa6>
 800213e:	2b70      	cmp	r3, #112	; 0x70
 8002140:	d87b      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
 8002142:	2b60      	cmp	r3, #96	; 0x60
 8002144:	d050      	beq.n	80021e8 <HAL_TIM_ConfigClockSource+0x11a>
 8002146:	2b60      	cmp	r3, #96	; 0x60
 8002148:	d877      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
 800214a:	2b50      	cmp	r3, #80	; 0x50
 800214c:	d03c      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0xfa>
 800214e:	2b50      	cmp	r3, #80	; 0x50
 8002150:	d873      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d058      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0x13a>
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d86f      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
 800215a:	2b30      	cmp	r3, #48	; 0x30
 800215c:	d064      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x15a>
 800215e:	2b30      	cmp	r3, #48	; 0x30
 8002160:	d86b      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
 8002162:	2b20      	cmp	r3, #32
 8002164:	d060      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x15a>
 8002166:	2b20      	cmp	r3, #32
 8002168:	d867      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d05c      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x15a>
 800216e:	2b10      	cmp	r3, #16
 8002170:	d05a      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x15a>
 8002172:	e062      	b.n	800223a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f000 f943 	bl	800240e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002196:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	609a      	str	r2, [r3, #8]
      break;
 80021a0:	e04f      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f000 f92c 	bl	800240e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c4:	609a      	str	r2, [r3, #8]
      break;
 80021c6:	e03c      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	461a      	mov	r2, r3
 80021d6:	f000 f8a3 	bl	8002320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2150      	movs	r1, #80	; 0x50
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f8fa 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 80021e6:	e02c      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f000 f8c1 	bl	800237c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2160      	movs	r1, #96	; 0x60
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f8ea 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 8002206:	e01c      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	461a      	mov	r2, r3
 8002216:	f000 f883 	bl	8002320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f8da 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 8002226:	e00c      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 f8d1 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 8002238:	e003      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      break;
 800223e:	e000      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002240:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a29      	ldr	r2, [pc, #164]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00b      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d007      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <TIM_Base_SetConfig+0xbc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <TIM_Base_SetConfig+0xc0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00b      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d007      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <TIM_Base_SetConfig+0xbc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d003      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <TIM_Base_SetConfig+0xc0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40012c00 	.word	0x40012c00
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800

08002320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f023 0201 	bic.w	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800234a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f023 030a 	bic.w	r3, r3, #10
 800235c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	621a      	str	r2, [r3, #32]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	f023 0210 	bic.w	r2, r3, #16
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	621a      	str	r2, [r3, #32]
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f043 0307 	orr.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800240e:	b480      	push	{r7}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	431a      	orrs	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	609a      	str	r2, [r3, #8]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002460:	2302      	movs	r3, #2
 8002462:	e046      	b.n	80024f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d009      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10c      	bne.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400
 8002504:	40000800 	.word	0x40000800

08002508 <__libc_init_array>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2600      	movs	r6, #0
 800250c:	4d0c      	ldr	r5, [pc, #48]	; (8002540 <__libc_init_array+0x38>)
 800250e:	4c0d      	ldr	r4, [pc, #52]	; (8002544 <__libc_init_array+0x3c>)
 8002510:	1b64      	subs	r4, r4, r5
 8002512:	10a4      	asrs	r4, r4, #2
 8002514:	42a6      	cmp	r6, r4
 8002516:	d109      	bne.n	800252c <__libc_init_array+0x24>
 8002518:	f000 f822 	bl	8002560 <_init>
 800251c:	2600      	movs	r6, #0
 800251e:	4d0a      	ldr	r5, [pc, #40]	; (8002548 <__libc_init_array+0x40>)
 8002520:	4c0a      	ldr	r4, [pc, #40]	; (800254c <__libc_init_array+0x44>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	42a6      	cmp	r6, r4
 8002528:	d105      	bne.n	8002536 <__libc_init_array+0x2e>
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002530:	4798      	blx	r3
 8002532:	3601      	adds	r6, #1
 8002534:	e7ee      	b.n	8002514 <__libc_init_array+0xc>
 8002536:	f855 3b04 	ldr.w	r3, [r5], #4
 800253a:	4798      	blx	r3
 800253c:	3601      	adds	r6, #1
 800253e:	e7f2      	b.n	8002526 <__libc_init_array+0x1e>
 8002540:	080025b8 	.word	0x080025b8
 8002544:	080025b8 	.word	0x080025b8
 8002548:	080025b8 	.word	0x080025b8
 800254c:	080025bc 	.word	0x080025bc

08002550 <memset>:
 8002550:	4603      	mov	r3, r0
 8002552:	4402      	add	r2, r0
 8002554:	4293      	cmp	r3, r2
 8002556:	d100      	bne.n	800255a <memset+0xa>
 8002558:	4770      	bx	lr
 800255a:	f803 1b01 	strb.w	r1, [r3], #1
 800255e:	e7f9      	b.n	8002554 <memset+0x4>

08002560 <_init>:
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002562:	bf00      	nop
 8002564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002566:	bc08      	pop	{r3}
 8002568:	469e      	mov	lr, r3
 800256a:	4770      	bx	lr

0800256c <_fini>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr
