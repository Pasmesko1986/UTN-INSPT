
Adquisicion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003124  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b8  080032b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032b8  080032b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032b8  080032b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  080032cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080032cc  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000895e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001979  00000000  00000000  000289d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0002a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f0  00000000  00000000  0002ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016946  00000000  00000000  0002b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab30  00000000  00000000  00041a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083605  00000000  00000000  0004c576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e50  00000000  00000000  000cfb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d19cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003218 	.word	0x08003218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003218 	.word	0x08003218

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fcd6 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f906 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f9bc 	bl	80004e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f952 	bl	8000418 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f98e 	bl	8000494 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(&rx_byte), 1);
 8000178:	2201      	movs	r2, #1
 800017a:	4972      	ldr	r1, [pc, #456]	; (8000344 <main+0x1e4>)
 800017c:	4872      	ldr	r0, [pc, #456]	; (8000348 <main+0x1e8>)
 800017e:	f002 fae0 	bl	8002742 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)(&tx_byte), 4);
 8000182:	2204      	movs	r2, #4
 8000184:	4971      	ldr	r1, [pc, #452]	; (800034c <main+0x1ec>)
 8000186:	4870      	ldr	r0, [pc, #448]	; (8000348 <main+0x1e8>)
 8000188:	f002 faa6 	bl	80026d8 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 800018c:	4b70      	ldr	r3, [pc, #448]	; (8000350 <main+0x1f0>)
 800018e:	2201      	movs	r2, #1
 8000190:	605a      	str	r2, [r3, #4]
	  	  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000192:	4b6f      	ldr	r3, [pc, #444]	; (8000350 <main+0x1f0>)
 8000194:	2200      	movs	r2, #0
 8000196:	609a      	str	r2, [r3, #8]

	  	  sConfigPrivate.Channel = ADC_CHANNEL_7;
 8000198:	4b6d      	ldr	r3, [pc, #436]	; (8000350 <main+0x1f0>)
 800019a:	2207      	movs	r2, #7
 800019c:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800019e:	496c      	ldr	r1, [pc, #432]	; (8000350 <main+0x1f0>)
 80001a0:	486c      	ldr	r0, [pc, #432]	; (8000354 <main+0x1f4>)
 80001a2:	f000 ffdd 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80001a6:	486b      	ldr	r0, [pc, #428]	; (8000354 <main+0x1f4>)
 80001a8:	f000 fdee 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80001ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001b0:	4868      	ldr	r0, [pc, #416]	; (8000354 <main+0x1f4>)
 80001b2:	f000 fec3 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue8 = HAL_ADC_GetValue(&hadc1);
 80001b6:	4867      	ldr	r0, [pc, #412]	; (8000354 <main+0x1f4>)
 80001b8:	f000 ffc6 	bl	8001148 <HAL_ADC_GetValue>
 80001bc:	4603      	mov	r3, r0
 80001be:	4a66      	ldr	r2, [pc, #408]	; (8000358 <main+0x1f8>)
 80001c0:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 80001c2:	4864      	ldr	r0, [pc, #400]	; (8000354 <main+0x1f4>)
 80001c4:	f000 fe8e 	bl	8000ee4 <HAL_ADC_Stop>

	  	  sConfigPrivate.Channel = ADC_CHANNEL_6;
 80001c8:	4b61      	ldr	r3, [pc, #388]	; (8000350 <main+0x1f0>)
 80001ca:	2206      	movs	r2, #6
 80001cc:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80001ce:	4960      	ldr	r1, [pc, #384]	; (8000350 <main+0x1f0>)
 80001d0:	4860      	ldr	r0, [pc, #384]	; (8000354 <main+0x1f4>)
 80001d2:	f000 ffc5 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80001d6:	485f      	ldr	r0, [pc, #380]	; (8000354 <main+0x1f4>)
 80001d8:	f000 fdd6 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80001dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001e0:	485c      	ldr	r0, [pc, #368]	; (8000354 <main+0x1f4>)
 80001e2:	f000 feab 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue7 = HAL_ADC_GetValue(&hadc1);
 80001e6:	485b      	ldr	r0, [pc, #364]	; (8000354 <main+0x1f4>)
 80001e8:	f000 ffae 	bl	8001148 <HAL_ADC_GetValue>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a5b      	ldr	r2, [pc, #364]	; (800035c <main+0x1fc>)
 80001f0:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 80001f2:	4858      	ldr	r0, [pc, #352]	; (8000354 <main+0x1f4>)
 80001f4:	f000 fe76 	bl	8000ee4 <HAL_ADC_Stop>

	  	  sConfigPrivate.Channel = ADC_CHANNEL_5;
 80001f8:	4b55      	ldr	r3, [pc, #340]	; (8000350 <main+0x1f0>)
 80001fa:	2205      	movs	r2, #5
 80001fc:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80001fe:	4954      	ldr	r1, [pc, #336]	; (8000350 <main+0x1f0>)
 8000200:	4854      	ldr	r0, [pc, #336]	; (8000354 <main+0x1f4>)
 8000202:	f000 ffad 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000206:	4853      	ldr	r0, [pc, #332]	; (8000354 <main+0x1f4>)
 8000208:	f000 fdbe 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800020c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000210:	4850      	ldr	r0, [pc, #320]	; (8000354 <main+0x1f4>)
 8000212:	f000 fe93 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue6 = HAL_ADC_GetValue(&hadc1);
 8000216:	484f      	ldr	r0, [pc, #316]	; (8000354 <main+0x1f4>)
 8000218:	f000 ff96 	bl	8001148 <HAL_ADC_GetValue>
 800021c:	4603      	mov	r3, r0
 800021e:	4a50      	ldr	r2, [pc, #320]	; (8000360 <main+0x200>)
 8000220:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000222:	484c      	ldr	r0, [pc, #304]	; (8000354 <main+0x1f4>)
 8000224:	f000 fe5e 	bl	8000ee4 <HAL_ADC_Stop>

	  	  sConfigPrivate.Channel = ADC_CHANNEL_4;
 8000228:	4b49      	ldr	r3, [pc, #292]	; (8000350 <main+0x1f0>)
 800022a:	2204      	movs	r2, #4
 800022c:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800022e:	4948      	ldr	r1, [pc, #288]	; (8000350 <main+0x1f0>)
 8000230:	4848      	ldr	r0, [pc, #288]	; (8000354 <main+0x1f4>)
 8000232:	f000 ff95 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000236:	4847      	ldr	r0, [pc, #284]	; (8000354 <main+0x1f4>)
 8000238:	f000 fda6 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800023c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000240:	4844      	ldr	r0, [pc, #272]	; (8000354 <main+0x1f4>)
 8000242:	f000 fe7b 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue5 = HAL_ADC_GetValue(&hadc1);
 8000246:	4843      	ldr	r0, [pc, #268]	; (8000354 <main+0x1f4>)
 8000248:	f000 ff7e 	bl	8001148 <HAL_ADC_GetValue>
 800024c:	4603      	mov	r3, r0
 800024e:	4a45      	ldr	r2, [pc, #276]	; (8000364 <main+0x204>)
 8000250:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000252:	4840      	ldr	r0, [pc, #256]	; (8000354 <main+0x1f4>)
 8000254:	f000 fe46 	bl	8000ee4 <HAL_ADC_Stop>

	  	  sConfigPrivate.Channel = ADC_CHANNEL_3;
 8000258:	4b3d      	ldr	r3, [pc, #244]	; (8000350 <main+0x1f0>)
 800025a:	2203      	movs	r2, #3
 800025c:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800025e:	493c      	ldr	r1, [pc, #240]	; (8000350 <main+0x1f0>)
 8000260:	483c      	ldr	r0, [pc, #240]	; (8000354 <main+0x1f4>)
 8000262:	f000 ff7d 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000266:	483b      	ldr	r0, [pc, #236]	; (8000354 <main+0x1f4>)
 8000268:	f000 fd8e 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800026c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000270:	4838      	ldr	r0, [pc, #224]	; (8000354 <main+0x1f4>)
 8000272:	f000 fe63 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue4 = HAL_ADC_GetValue(&hadc1);
 8000276:	4837      	ldr	r0, [pc, #220]	; (8000354 <main+0x1f4>)
 8000278:	f000 ff66 	bl	8001148 <HAL_ADC_GetValue>
 800027c:	4603      	mov	r3, r0
 800027e:	4a3a      	ldr	r2, [pc, #232]	; (8000368 <main+0x208>)
 8000280:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000282:	4834      	ldr	r0, [pc, #208]	; (8000354 <main+0x1f4>)
 8000284:	f000 fe2e 	bl	8000ee4 <HAL_ADC_Stop>

	  	  sConfigPrivate.Channel = ADC_CHANNEL_2;
 8000288:	4b31      	ldr	r3, [pc, #196]	; (8000350 <main+0x1f0>)
 800028a:	2202      	movs	r2, #2
 800028c:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800028e:	4930      	ldr	r1, [pc, #192]	; (8000350 <main+0x1f0>)
 8000290:	4830      	ldr	r0, [pc, #192]	; (8000354 <main+0x1f4>)
 8000292:	f000 ff65 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000296:	482f      	ldr	r0, [pc, #188]	; (8000354 <main+0x1f4>)
 8000298:	f000 fd76 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800029c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002a0:	482c      	ldr	r0, [pc, #176]	; (8000354 <main+0x1f4>)
 80002a2:	f000 fe4b 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue3 = HAL_ADC_GetValue(&hadc1);
 80002a6:	482b      	ldr	r0, [pc, #172]	; (8000354 <main+0x1f4>)
 80002a8:	f000 ff4e 	bl	8001148 <HAL_ADC_GetValue>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4a2f      	ldr	r2, [pc, #188]	; (800036c <main+0x20c>)
 80002b0:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 80002b2:	4828      	ldr	r0, [pc, #160]	; (8000354 <main+0x1f4>)
 80002b4:	f000 fe16 	bl	8000ee4 <HAL_ADC_Stop>

	  	  sConfigPrivate.Channel = ADC_CHANNEL_1;
 80002b8:	4b25      	ldr	r3, [pc, #148]	; (8000350 <main+0x1f0>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80002be:	4924      	ldr	r1, [pc, #144]	; (8000350 <main+0x1f0>)
 80002c0:	4824      	ldr	r0, [pc, #144]	; (8000354 <main+0x1f4>)
 80002c2:	f000 ff4d 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80002c6:	4823      	ldr	r0, [pc, #140]	; (8000354 <main+0x1f4>)
 80002c8:	f000 fd5e 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80002cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002d0:	4820      	ldr	r0, [pc, #128]	; (8000354 <main+0x1f4>)
 80002d2:	f000 fe33 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue2 = HAL_ADC_GetValue(&hadc1);
 80002d6:	481f      	ldr	r0, [pc, #124]	; (8000354 <main+0x1f4>)
 80002d8:	f000 ff36 	bl	8001148 <HAL_ADC_GetValue>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a24      	ldr	r2, [pc, #144]	; (8000370 <main+0x210>)
 80002e0:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 80002e2:	481c      	ldr	r0, [pc, #112]	; (8000354 <main+0x1f4>)
 80002e4:	f000 fdfe 	bl	8000ee4 <HAL_ADC_Stop>

	  	  sConfigPrivate.Channel = ADC_CHANNEL_0;
 80002e8:	4b19      	ldr	r3, [pc, #100]	; (8000350 <main+0x1f0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80002ee:	4918      	ldr	r1, [pc, #96]	; (8000350 <main+0x1f0>)
 80002f0:	4818      	ldr	r0, [pc, #96]	; (8000354 <main+0x1f4>)
 80002f2:	f000 ff35 	bl	8001160 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 80002f6:	4817      	ldr	r0, [pc, #92]	; (8000354 <main+0x1f4>)
 80002f8:	f000 fd46 	bl	8000d88 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 80002fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000300:	4814      	ldr	r0, [pc, #80]	; (8000354 <main+0x1f4>)
 8000302:	f000 fe1b 	bl	8000f3c <HAL_ADC_PollForConversion>
	  	  readValue1 = HAL_ADC_GetValue(&hadc1);
 8000306:	4813      	ldr	r0, [pc, #76]	; (8000354 <main+0x1f4>)
 8000308:	f000 ff1e 	bl	8001148 <HAL_ADC_GetValue>
 800030c:	4603      	mov	r3, r0
 800030e:	4a19      	ldr	r2, [pc, #100]	; (8000374 <main+0x214>)
 8000310:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000312:	4810      	ldr	r0, [pc, #64]	; (8000354 <main+0x1f4>)
 8000314:	f000 fde6 	bl	8000ee4 <HAL_ADC_Stop>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  if(rx_byte){
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <main+0x1e4>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	f43f af34 	beq.w	800018c <main+0x2c>
			  Receiver(rx_byte);
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <main+0x1e4>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f932 	bl	8000594 <Receiver>
			  rx_byte = 0;
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <main+0x1e4>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Receive_IT(&huart1, (uint8_t *)(&rx_byte), 1);
 8000336:	2201      	movs	r2, #1
 8000338:	4902      	ldr	r1, [pc, #8]	; (8000344 <main+0x1e4>)
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <main+0x1e8>)
 800033c:	f002 fa01 	bl	8002742 <HAL_UART_Receive_IT>
	  	  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000340:	e724      	b.n	800018c <main+0x2c>
 8000342:	bf00      	nop
 8000344:	200000a0 	.word	0x200000a0
 8000348:	20000058 	.word	0x20000058
 800034c:	200000b8 	.word	0x200000b8
 8000350:	200000dc 	.word	0x200000dc
 8000354:	20000028 	.word	0x20000028
 8000358:	200000d8 	.word	0x200000d8
 800035c:	200000d4 	.word	0x200000d4
 8000360:	200000d0 	.word	0x200000d0
 8000364:	200000cc 	.word	0x200000cc
 8000368:	200000c8 	.word	0x200000c8
 800036c:	200000c4 	.word	0x200000c4
 8000370:	200000c0 	.word	0x200000c0
 8000374:	200000bc 	.word	0x200000bc

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b094      	sub	sp, #80	; 0x50
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 ff1a 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2310      	movs	r3, #16
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fbbf 	bl	8001b40 <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003c8:	f000 fa7e 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fe2c 	bl	8002044 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003f2:	f000 fa69 	bl	80008c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003f6:	2302      	movs	r3, #2
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f001 ffad 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800040c:	f000 fa5c 	bl	80008c8 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3750      	adds	r7, #80	; 0x50
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_ADC1_Init+0x74>)
 800042a:	4a19      	ldr	r2, [pc, #100]	; (8000490 <MX_ADC1_Init+0x78>)
 800042c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_ADC1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_ADC1_Init+0x74>)
 8000436:	2201      	movs	r2, #1
 8000438:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_ADC1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_ADC1_Init+0x74>)
 8000442:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000446:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_ADC1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_ADC1_Init+0x74>)
 8000450:	2201      	movs	r2, #1
 8000452:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000454:	480d      	ldr	r0, [pc, #52]	; (800048c <MX_ADC1_Init+0x74>)
 8000456:	f000 fbbf 	bl	8000bd8 <HAL_ADC_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000460:	f000 fa32 	bl	80008c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000464:	2304      	movs	r3, #4
 8000466:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000468:	2301      	movs	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4619      	mov	r1, r3
 8000474:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_ADC1_Init+0x74>)
 8000476:	f000 fe73 	bl	8001160 <HAL_ADC_ConfigChannel>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000480:	f000 fa22 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000028 	.word	0x20000028
 8000490:	40012400 	.word	0x40012400

08000494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_USART1_UART_Init+0x50>)
 800049c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004cc:	f002 f8b4 	bl	8002638 <HAL_UART_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004d6:	f000 f9f7 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000058 	.word	0x20000058
 80004e4:	40013800 	.word	0x40013800

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b22      	ldr	r3, [pc, #136]	; (8000588 <MX_GPIO_Init+0xa0>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a21      	ldr	r2, [pc, #132]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_GPIO_Init+0xa0>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <MX_GPIO_Init+0xa0>)
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_GPIO_Init+0xa0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0308 	and.w	r3, r3, #8
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000532:	4816      	ldr	r0, [pc, #88]	; (800058c <MX_GPIO_Init+0xa4>)
 8000534:	f001 faec 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4814      	ldr	r0, [pc, #80]	; (8000590 <MX_GPIO_Init+0xa8>)
 8000540:	f001 fae6 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000544:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800054e:	2302      	movs	r3, #2
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4619      	mov	r1, r3
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <MX_GPIO_Init+0xa4>)
 800055e:	f001 f953 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056c:	2302      	movs	r3, #2
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	4619      	mov	r1, r3
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_GPIO_Init+0xa8>)
 800057c:	f001 f944 	bl	8001808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000580:	bf00      	nop
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40010800 	.word	0x40010800

08000594 <Receiver>:

/* USER CODE BEGIN 4 */
void Analizador (void);

void Receiver(uint8_t dato){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	static index = 0;

	if(rx_byte == '#'){
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <Receiver+0x80>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b23      	cmp	r3, #35	; 0x23
 80005a6:	d108      	bne.n	80005ba <Receiver+0x26>
		rx2_byte[0] = rx_byte;
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <Receiver+0x80>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <Receiver+0x84>)
 80005b0:	701a      	strb	r2, [r3, #0]
		index = 1;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <Receiver+0x88>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
		index = 0;
		Analizador();
	}else if(index != 0){
		rx2_byte[index++] = rx_byte;
	}
}
 80005b8:	e027      	b.n	800060a <Receiver+0x76>
	}else if(rx_byte == '*'){
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <Receiver+0x80>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b2a      	cmp	r3, #42	; 0x2a
 80005c2:	d114      	bne.n	80005ee <Receiver+0x5a>
		rx2_byte[index++] = rx_byte;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <Receiver+0x88>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1c5a      	adds	r2, r3, #1
 80005ca:	4914      	ldr	r1, [pc, #80]	; (800061c <Receiver+0x88>)
 80005cc:	600a      	str	r2, [r1, #0]
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <Receiver+0x80>)
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	b2d1      	uxtb	r1, r2
 80005d4:	4a10      	ldr	r2, [pc, #64]	; (8000618 <Receiver+0x84>)
 80005d6:	54d1      	strb	r1, [r2, r3]
		rx2_byte[index] = 0;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <Receiver+0x88>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <Receiver+0x84>)
 80005de:	2100      	movs	r1, #0
 80005e0:	54d1      	strb	r1, [r2, r3]
		index = 0;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <Receiver+0x88>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
		Analizador();
 80005e8:	f000 f81a 	bl	8000620 <Analizador>
}
 80005ec:	e00d      	b.n	800060a <Receiver+0x76>
	}else if(index != 0){
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <Receiver+0x88>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d009      	beq.n	800060a <Receiver+0x76>
		rx2_byte[index++] = rx_byte;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <Receiver+0x88>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <Receiver+0x88>)
 80005fe:	600a      	str	r2, [r1, #0]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <Receiver+0x80>)
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	b2d1      	uxtb	r1, r2
 8000606:	4a04      	ldr	r2, [pc, #16]	; (8000618 <Receiver+0x84>)
 8000608:	54d1      	strb	r1, [r2, r3]
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000a0 	.word	0x200000a0
 8000618:	200000a4 	.word	0x200000a4
 800061c:	200000e8 	.word	0x200000e8

08000620 <Analizador>:

void Analizador (void){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	int resu;

	do{
		if(strcmp((const char *)(rx2_byte),"#TEMP*") == 0){
 8000624:	4996      	ldr	r1, [pc, #600]	; (8000880 <Analizador+0x260>)
 8000626:	4897      	ldr	r0, [pc, #604]	; (8000884 <Analizador+0x264>)
 8000628:	f7ff fd90 	bl	800014c <strcmp>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d12b      	bne.n	800068a <Analizador+0x6a>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	4893      	ldr	r0, [pc, #588]	; (8000888 <Analizador+0x268>)
 800063a:	f001 fa69 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000644:	4891      	ldr	r0, [pc, #580]	; (800088c <Analizador+0x26c>)
 8000646:	f001 fa63 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000650:	488e      	ldr	r0, [pc, #568]	; (800088c <Analizador+0x26c>)
 8000652:	f001 fa5d 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065c:	488b      	ldr	r0, [pc, #556]	; (800088c <Analizador+0x26c>)
 800065e:	f001 fa57 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000668:	4888      	ldr	r0, [pc, #544]	; (800088c <Analizador+0x26c>)
 800066a:	f001 fa51 	bl	8001b10 <HAL_GPIO_WritePin>
			tx_byte = readValue1;
 800066e:	4b88      	ldr	r3, [pc, #544]	; (8000890 <Analizador+0x270>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b87      	ldr	r3, [pc, #540]	; (8000894 <Analizador+0x274>)
 8000676:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)(&tx_byte), 4);
 8000678:	2204      	movs	r2, #4
 800067a:	4986      	ldr	r1, [pc, #536]	; (8000894 <Analizador+0x274>)
 800067c:	4886      	ldr	r0, [pc, #536]	; (8000898 <Analizador+0x278>)
 800067e:	f002 f82b 	bl	80026d8 <HAL_UART_Transmit_IT>
			valor = 1;
 8000682:	4b86      	ldr	r3, [pc, #536]	; (800089c <Analizador+0x27c>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
			break;
 8000688:	e0f7      	b.n	800087a <Analizador+0x25a>
		}
		if(strcmp((const char *)(rx2_byte),"#ANEMOMETER*") == 0){
 800068a:	4985      	ldr	r1, [pc, #532]	; (80008a0 <Analizador+0x280>)
 800068c:	487d      	ldr	r0, [pc, #500]	; (8000884 <Analizador+0x264>)
 800068e:	f7ff fd5d 	bl	800014c <strcmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d12b      	bne.n	80006f0 <Analizador+0xd0>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	487a      	ldr	r0, [pc, #488]	; (8000888 <Analizador+0x268>)
 80006a0:	f001 fa36 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006aa:	4878      	ldr	r0, [pc, #480]	; (800088c <Analizador+0x26c>)
 80006ac:	f001 fa30 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4875      	ldr	r0, [pc, #468]	; (800088c <Analizador+0x26c>)
 80006b8:	f001 fa2a 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4872      	ldr	r0, [pc, #456]	; (800088c <Analizador+0x26c>)
 80006c4:	f001 fa24 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	486f      	ldr	r0, [pc, #444]	; (800088c <Analizador+0x26c>)
 80006d0:	f001 fa1e 	bl	8001b10 <HAL_GPIO_WritePin>
			tx_byte = readValue2;
 80006d4:	4b73      	ldr	r3, [pc, #460]	; (80008a4 <Analizador+0x284>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b6e      	ldr	r3, [pc, #440]	; (8000894 <Analizador+0x274>)
 80006dc:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)(&tx_byte), 4);
 80006de:	2204      	movs	r2, #4
 80006e0:	496c      	ldr	r1, [pc, #432]	; (8000894 <Analizador+0x274>)
 80006e2:	486d      	ldr	r0, [pc, #436]	; (8000898 <Analizador+0x278>)
 80006e4:	f001 fff8 	bl	80026d8 <HAL_UART_Transmit_IT>
			valor = 2;
 80006e8:	4b6c      	ldr	r3, [pc, #432]	; (800089c <Analizador+0x27c>)
 80006ea:	2202      	movs	r2, #2
 80006ec:	701a      	strb	r2, [r3, #0]
			break;
 80006ee:	e0c4      	b.n	800087a <Analizador+0x25a>
		}
		if(strcmp((const char *)(rx2_byte),"#RAIN_DROP*") == 0){
 80006f0:	496d      	ldr	r1, [pc, #436]	; (80008a8 <Analizador+0x288>)
 80006f2:	4864      	ldr	r0, [pc, #400]	; (8000884 <Analizador+0x264>)
 80006f4:	f7ff fd2a 	bl	800014c <strcmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d12b      	bne.n	8000756 <Analizador+0x136>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4860      	ldr	r0, [pc, #384]	; (8000888 <Analizador+0x268>)
 8000706:	f001 fa03 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000710:	485e      	ldr	r0, [pc, #376]	; (800088c <Analizador+0x26c>)
 8000712:	f001 f9fd 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	485b      	ldr	r0, [pc, #364]	; (800088c <Analizador+0x26c>)
 800071e:	f001 f9f7 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4858      	ldr	r0, [pc, #352]	; (800088c <Analizador+0x26c>)
 800072a:	f001 f9f1 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	4855      	ldr	r0, [pc, #340]	; (800088c <Analizador+0x26c>)
 8000736:	f001 f9eb 	bl	8001b10 <HAL_GPIO_WritePin>
			tx_byte = readValue3;
 800073a:	4b5c      	ldr	r3, [pc, #368]	; (80008ac <Analizador+0x28c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b54      	ldr	r3, [pc, #336]	; (8000894 <Analizador+0x274>)
 8000742:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)(&tx_byte), 4);
 8000744:	2204      	movs	r2, #4
 8000746:	4953      	ldr	r1, [pc, #332]	; (8000894 <Analizador+0x274>)
 8000748:	4853      	ldr	r0, [pc, #332]	; (8000898 <Analizador+0x278>)
 800074a:	f001 ffc5 	bl	80026d8 <HAL_UART_Transmit_IT>
			valor = 2;
 800074e:	4b53      	ldr	r3, [pc, #332]	; (800089c <Analizador+0x27c>)
 8000750:	2202      	movs	r2, #2
 8000752:	701a      	strb	r2, [r3, #0]
			break;
 8000754:	e091      	b.n	800087a <Analizador+0x25a>
		}
		if(strcmp((const char *)(rx2_byte),"#SOIL_MOISTURE*") == 0){
 8000756:	4956      	ldr	r1, [pc, #344]	; (80008b0 <Analizador+0x290>)
 8000758:	484a      	ldr	r0, [pc, #296]	; (8000884 <Analizador+0x264>)
 800075a:	f7ff fcf7 	bl	800014c <strcmp>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d12b      	bne.n	80007bc <Analizador+0x19c>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076a:	4847      	ldr	r0, [pc, #284]	; (8000888 <Analizador+0x268>)
 800076c:	f001 f9d0 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000776:	4845      	ldr	r0, [pc, #276]	; (800088c <Analizador+0x26c>)
 8000778:	f001 f9ca 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000782:	4842      	ldr	r0, [pc, #264]	; (800088c <Analizador+0x26c>)
 8000784:	f001 f9c4 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078e:	483f      	ldr	r0, [pc, #252]	; (800088c <Analizador+0x26c>)
 8000790:	f001 f9be 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079a:	483c      	ldr	r0, [pc, #240]	; (800088c <Analizador+0x26c>)
 800079c:	f001 f9b8 	bl	8001b10 <HAL_GPIO_WritePin>
			tx_byte = readValue4;
 80007a0:	4b44      	ldr	r3, [pc, #272]	; (80008b4 <Analizador+0x294>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <Analizador+0x274>)
 80007a8:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)(&tx_byte), 4);
 80007aa:	2204      	movs	r2, #4
 80007ac:	4939      	ldr	r1, [pc, #228]	; (8000894 <Analizador+0x274>)
 80007ae:	483a      	ldr	r0, [pc, #232]	; (8000898 <Analizador+0x278>)
 80007b0:	f001 ff92 	bl	80026d8 <HAL_UART_Transmit_IT>
			valor = 2;
 80007b4:	4b39      	ldr	r3, [pc, #228]	; (800089c <Analizador+0x27c>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	701a      	strb	r2, [r3, #0]
			break;
 80007ba:	e05e      	b.n	800087a <Analizador+0x25a>
		}
		if(strcmp((const char *)(rx2_byte),"#UV_LEVEL*") == 0){
 80007bc:	493e      	ldr	r1, [pc, #248]	; (80008b8 <Analizador+0x298>)
 80007be:	4831      	ldr	r0, [pc, #196]	; (8000884 <Analizador+0x264>)
 80007c0:	f7ff fcc4 	bl	800014c <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d12b      	bne.n	8000822 <Analizador+0x202>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	482d      	ldr	r0, [pc, #180]	; (8000888 <Analizador+0x268>)
 80007d2:	f001 f99d 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007dc:	482b      	ldr	r0, [pc, #172]	; (800088c <Analizador+0x26c>)
 80007de:	f001 f997 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e8:	4828      	ldr	r0, [pc, #160]	; (800088c <Analizador+0x26c>)
 80007ea:	f001 f991 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <Analizador+0x26c>)
 80007f6:	f001 f98b 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <Analizador+0x26c>)
 8000802:	f001 f985 	bl	8001b10 <HAL_GPIO_WritePin>
			tx_byte = readValue5;
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <Analizador+0x29c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <Analizador+0x274>)
 800080e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)(&tx_byte), 4);
 8000810:	2204      	movs	r2, #4
 8000812:	4920      	ldr	r1, [pc, #128]	; (8000894 <Analizador+0x274>)
 8000814:	4820      	ldr	r0, [pc, #128]	; (8000898 <Analizador+0x278>)
 8000816:	f001 ff5f 	bl	80026d8 <HAL_UART_Transmit_IT>
			valor = 2;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <Analizador+0x27c>)
 800081c:	2202      	movs	r2, #2
 800081e:	701a      	strb	r2, [r3, #0]
			break;
 8000820:	e02b      	b.n	800087a <Analizador+0x25a>
		}
		if(strcmp((const char *)(rx2_byte),"#EXIT*") == 0){
 8000822:	4927      	ldr	r1, [pc, #156]	; (80008c0 <Analizador+0x2a0>)
 8000824:	4817      	ldr	r0, [pc, #92]	; (8000884 <Analizador+0x264>)
 8000826:	f7ff fc91 	bl	800014c <strcmp>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d124      	bne.n	800087a <Analizador+0x25a>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <Analizador+0x268>)
 8000838:	f001 f96a 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <Analizador+0x26c>)
 8000844:	f001 f964 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084e:	480f      	ldr	r0, [pc, #60]	; (800088c <Analizador+0x26c>)
 8000850:	f001 f95e 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <Analizador+0x26c>)
 800085c:	f001 f958 	bl	8001b10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <Analizador+0x26c>)
 8000868:	f001 f952 	bl	8001b10 <HAL_GPIO_WritePin>
			rx_byte = 0;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <Analizador+0x2a4>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
			tx_byte = 0;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <Analizador+0x274>)
 8000874:	2200      	movs	r2, #0
 8000876:	801a      	strh	r2, [r3, #0]
			break;
 8000878:	bf00      	nop
		}

	}while(0);
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	08003230 	.word	0x08003230
 8000884:	200000a4 	.word	0x200000a4
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00
 8000890:	200000bc 	.word	0x200000bc
 8000894:	200000b8 	.word	0x200000b8
 8000898:	20000058 	.word	0x20000058
 800089c:	200000ba 	.word	0x200000ba
 80008a0:	08003238 	.word	0x08003238
 80008a4:	200000c0 	.word	0x200000c0
 80008a8:	08003248 	.word	0x08003248
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	08003254 	.word	0x08003254
 80008b4:	200000c8 	.word	0x200000c8
 80008b8:	08003264 	.word	0x08003264
 80008bc:	200000cc 	.word	0x200000cc
 80008c0:	08003270 	.word	0x08003270
 80008c4:	200000a0 	.word	0x200000a0

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_MspInit+0x5c>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_MspInit+0x5c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_MspInit+0x5c>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x5c>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x5c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x5c>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_MspInit+0x60>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_MspInit+0x60>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000
 8000934:	40010000 	.word	0x40010000

08000938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_ADC_MspInit+0x6c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d121      	bne.n	800099c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_ADC_MspInit+0x70>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_ADC_MspInit+0x70>)
 800095e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_ADC_MspInit+0x70>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_ADC_MspInit+0x70>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_ADC_MspInit+0x70>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_ADC_MspInit+0x70>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_ADC_MspInit+0x74>)
 8000998:	f000 ff36 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40012400 	.word	0x40012400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <HAL_UART_MspInit+0x9c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d139      	bne.n	8000a44 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <HAL_UART_MspInit+0xa0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_UART_MspInit+0xa0>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_UART_MspInit+0xa0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_UART_MspInit+0xa0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0xa0>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_UART_MspInit+0xa0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	480f      	ldr	r0, [pc, #60]	; (8000a54 <HAL_UART_MspInit+0xa4>)
 8000a16:	f000 fef7 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4809      	ldr	r0, [pc, #36]	; (8000a54 <HAL_UART_MspInit+0xa4>)
 8000a30:	f000 feea 	bl	8001808 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2025      	movs	r0, #37	; 0x25
 8000a3a:	f000 fdfc 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a3e:	2025      	movs	r0, #37	; 0x25
 8000a40:	f000 fe15 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010800 	.word	0x40010800

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f87f 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART1_IRQHandler+0x10>)
 8000aae:	f001 fe6d 	bl	800278c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000058 	.word	0x20000058

08000abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac8:	f7ff fff8 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ace:	490c      	ldr	r1, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae4:	4c09      	ldr	r4, [pc, #36]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 fb6d 	bl	80031d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fb33 	bl	8000160 <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b04:	080032c0 	.word	0x080032c0
  ldr r2, =_sbss
 8000b08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b0c:	200000f0 	.word	0x200000f0

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 fd7b 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fed0 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fd93 	bl	800168a <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 fd5b 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200000ec 	.word	0x200000ec

08000bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	200000ec 	.word	0x200000ec

08000bd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e0be      	b.n	8000d78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fe8e 	bl	8000938 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 fbf1 	bl	8001404 <ADC_ConversionStop_Disable>
 8000c22:	4603      	mov	r3, r0
 8000c24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 8099 	bne.w	8000d66 <HAL_ADC_Init+0x18e>
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8095 	bne.w	8000d66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c44:	f023 0302 	bic.w	r3, r3, #2
 8000c48:	f043 0202 	orr.w	r2, r3, #2
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7b1b      	ldrb	r3, [r3, #12]
 8000c5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c70:	d003      	beq.n	8000c7a <HAL_ADC_Init+0xa2>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d102      	bne.n	8000c80 <HAL_ADC_Init+0xa8>
 8000c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7e:	e000      	b.n	8000c82 <HAL_ADC_Init+0xaa>
 8000c80:	2300      	movs	r3, #0
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7d1b      	ldrb	r3, [r3, #20]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d119      	bne.n	8000cc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7b1b      	ldrb	r3, [r3, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	035a      	lsls	r2, r3, #13
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	e00b      	b.n	8000cc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	f043 0220 	orr.w	r2, r3, #32
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	f043 0201 	orr.w	r2, r3, #1
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <HAL_ADC_Init+0x1a8>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf4:	d003      	beq.n	8000cfe <HAL_ADC_Init+0x126>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d104      	bne.n	8000d08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	051b      	lsls	r3, r3, #20
 8000d06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_ADC_Init+0x1ac>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d10b      	bne.n	8000d44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	f043 0201 	orr.w	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d42:	e018      	b.n	8000d76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	f023 0312 	bic.w	r3, r3, #18
 8000d4c:	f043 0210 	orr.w	r2, r3, #16
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d64:	e007      	b.n	8000d76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6a:	f043 0210 	orr.w	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	ffe1f7fd 	.word	0xffe1f7fd
 8000d84:	ff1f0efe 	.word	0xff1f0efe

08000d88 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_ADC_Start+0x1a>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e098      	b.n	8000ed4 <HAL_ADC_Start+0x14c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 fad0 	bl	8001350 <ADC_Enable>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8087 	bne.w	8000eca <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dc4:	f023 0301 	bic.w	r3, r3, #1
 8000dc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a41      	ldr	r2, [pc, #260]	; (8000edc <HAL_ADC_Start+0x154>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d105      	bne.n	8000de6 <HAL_ADC_Start+0x5e>
 8000dda:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <HAL_ADC_Start+0x158>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d115      	bne.n	8000e12 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d026      	beq.n	8000e4e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e10:	e01d      	b.n	8000e4e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <HAL_ADC_Start+0x158>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d004      	beq.n	8000e32 <HAL_ADC_Start+0xaa>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <HAL_ADC_Start+0x154>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10d      	bne.n	8000e4e <HAL_ADC_Start+0xc6>
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_ADC_Start+0x158>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	f023 0206 	bic.w	r2, r3, #6
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e66:	e002      	b.n	8000e6e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f06f 0202 	mvn.w	r2, #2
 8000e7e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e8a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e8e:	d113      	bne.n	8000eb8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_ADC_Start+0x154>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d105      	bne.n	8000ea6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_ADC_Start+0x158>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d108      	bne.n	8000eb8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	e00c      	b.n	8000ed2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e003      	b.n	8000ed2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40012800 	.word	0x40012800
 8000ee0:	40012400 	.word	0x40012400

08000ee4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Stop+0x1a>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e01a      	b.n	8000f34 <HAL_ADC_Stop+0x50>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fa7c 	bl	8001404 <ADC_ConversionStop_Disable>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f1e:	f023 0301 	bic.w	r3, r3, #1
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f52:	f7ff fe37 	bl	8000bc4 <HAL_GetTick>
 8000f56:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	f043 0220 	orr.w	r2, r3, #32
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0d3      	b.n	8001126 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d131      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d12a      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f9a:	e021      	b.n	8000fe0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa2:	d01d      	beq.n	8000fe0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <HAL_ADC_PollForConversion+0x7e>
 8000faa:	f7ff fe0b 	bl	8000bc4 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d212      	bcs.n	8000fe0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	f043 0204 	orr.w	r2, r3, #4
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e0a2      	b.n	8001126 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0d6      	beq.n	8000f9c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fee:	e070      	b.n	80010d2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <HAL_ADC_PollForConversion+0x1f4>)
 8000ff2:	681c      	ldr	r4, [r3, #0]
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f001 fa69 	bl	80024cc <HAL_RCCEx_GetPeriphCLKFreq>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6919      	ldr	r1, [r3, #16]
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <HAL_ADC_PollForConversion+0x1f8>)
 8001008:	400b      	ands	r3, r1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_ADC_PollForConversion+0x104>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68d9      	ldr	r1, [r3, #12]
 8001014:	4b48      	ldr	r3, [pc, #288]	; (8001138 <HAL_ADC_PollForConversion+0x1fc>)
 8001016:	400b      	ands	r3, r1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d111      	bne.n	8001040 <HAL_ADC_PollForConversion+0x104>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6919      	ldr	r1, [r3, #16]
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <HAL_ADC_PollForConversion+0x200>)
 8001024:	400b      	ands	r3, r1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <HAL_ADC_PollForConversion+0x100>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68d9      	ldr	r1, [r3, #12]
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_ADC_PollForConversion+0x204>)
 8001032:	400b      	ands	r3, r1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_ADC_PollForConversion+0x100>
 8001038:	2314      	movs	r3, #20
 800103a:	e020      	b.n	800107e <HAL_ADC_PollForConversion+0x142>
 800103c:	2329      	movs	r3, #41	; 0x29
 800103e:	e01e      	b.n	800107e <HAL_ADC_PollForConversion+0x142>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6919      	ldr	r1, [r3, #16]
 8001046:	4b3d      	ldr	r3, [pc, #244]	; (800113c <HAL_ADC_PollForConversion+0x200>)
 8001048:	400b      	ands	r3, r1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <HAL_ADC_PollForConversion+0x120>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68d9      	ldr	r1, [r3, #12]
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_ADC_PollForConversion+0x204>)
 8001056:	400b      	ands	r3, r1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00d      	beq.n	8001078 <HAL_ADC_PollForConversion+0x13c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6919      	ldr	r1, [r3, #16]
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <HAL_ADC_PollForConversion+0x208>)
 8001064:	400b      	ands	r3, r1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d108      	bne.n	800107c <HAL_ADC_PollForConversion+0x140>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68d9      	ldr	r1, [r3, #12]
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <HAL_ADC_PollForConversion+0x208>)
 8001072:	400b      	ands	r3, r1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_ADC_PollForConversion+0x140>
 8001078:	2354      	movs	r3, #84	; 0x54
 800107a:	e000      	b.n	800107e <HAL_ADC_PollForConversion+0x142>
 800107c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001084:	e021      	b.n	80010ca <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d01a      	beq.n	80010c4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <HAL_ADC_PollForConversion+0x168>
 8001094:	f7ff fd96 	bl	8000bc4 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d20f      	bcs.n	80010c4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d90b      	bls.n	80010c4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f043 0204 	orr.w	r2, r3, #4
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e030      	b.n	8001126 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d8d9      	bhi.n	8001086 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f06f 0212 	mvn.w	r2, #18
 80010da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010f6:	d115      	bne.n	8001124 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d111      	bne.n	8001124 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000
 8001134:	24924924 	.word	0x24924924
 8001138:	00924924 	.word	0x00924924
 800113c:	12492492 	.word	0x12492492
 8001140:	00492492 	.word	0x00492492
 8001144:	00249249 	.word	0x00249249

08001148 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x20>
 800117c:	2302      	movs	r3, #2
 800117e:	e0dc      	b.n	800133a <HAL_ADC_ConfigChannel+0x1da>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b06      	cmp	r3, #6
 800118e:	d81c      	bhi.n	80011ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	3b05      	subs	r3, #5
 80011a2:	221f      	movs	r2, #31
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4019      	ands	r1, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b05      	subs	r3, #5
 80011bc:	fa00 f203 	lsl.w	r2, r0, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
 80011c8:	e03c      	b.n	8001244 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b0c      	cmp	r3, #12
 80011d0:	d81c      	bhi.n	800120c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	3b23      	subs	r3, #35	; 0x23
 80011e4:	221f      	movs	r2, #31
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	4019      	ands	r1, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b23      	subs	r3, #35	; 0x23
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
 800120a:	e01b      	b.n	8001244 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b41      	subs	r3, #65	; 0x41
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4019      	ands	r1, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d91c      	bls.n	8001286 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68d9      	ldr	r1, [r3, #12]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	3b1e      	subs	r3, #30
 800125e:	2207      	movs	r2, #7
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	3b1e      	subs	r3, #30
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	e019      	b.n	80012ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6919      	ldr	r1, [r3, #16]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6898      	ldr	r0, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d003      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d132      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_ADC_ConfigChannel+0x1e4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d125      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d126      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d11a      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_ADC_ConfigChannel+0x1e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_ADC_ConfigChannel+0x1ec>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9a      	lsrs	r2, r3, #18
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001310:	e002      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3b01      	subs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f9      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x1b2>
 800131e:	e007      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	f043 0220 	orr.w	r2, r3, #32
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40012400 	.word	0x40012400
 8001348:	20000000 	.word	0x20000000
 800134c:	431bde83 	.word	0x431bde83

08001350 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d040      	beq.n	80013f0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <ADC_Enable+0xac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <ADC_Enable+0xb0>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	0c9b      	lsrs	r3, r3, #18
 800138a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800138c:	e002      	b.n	8001394 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3b01      	subs	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139a:	f7ff fc13 	bl	8000bc4 <HAL_GetTick>
 800139e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013a0:	e01f      	b.n	80013e2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013a2:	f7ff fc0f 	bl	8000bc4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d918      	bls.n	80013e2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d011      	beq.n	80013e2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f043 0210 	orr.w	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e007      	b.n	80013f2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d1d8      	bne.n	80013a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d12e      	bne.n	800147c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800142e:	f7ff fbc9 	bl	8000bc4 <HAL_GetTick>
 8001432:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001434:	e01b      	b.n	800146e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001436:	f7ff fbc5 	bl	8000bc4 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d914      	bls.n	800146e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d10d      	bne.n	800146e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	f043 0210 	orr.w	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e007      	b.n	800147e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d0dc      	beq.n	8001436 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4906      	ldr	r1, [pc, #24]	; (8001520 <__NVIC_EnableIRQ+0x34>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff90 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff2d 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff42 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff90 	bl	8001578 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5f 	bl	8001524 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff35 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d008      	beq.n	80016cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e020      	b.n	800170e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 020e 	bic.w	r2, r2, #14
 80016da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	2101      	movs	r1, #1
 80016f6:	fa01 f202 	lsl.w	r2, r1, r2
 80016fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d005      	beq.n	800173c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2204      	movs	r2, #4
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	e051      	b.n	80017e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 020e 	bic.w	r2, r2, #14
 800174a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_DMA_Abort_IT+0xd4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d029      	beq.n	80017ba <HAL_DMA_Abort_IT+0xa2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_DMA_Abort_IT+0xd8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x9e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_DMA_Abort_IT+0xdc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01a      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x98>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <HAL_DMA_Abort_IT+0xe0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d012      	beq.n	80017aa <HAL_DMA_Abort_IT+0x92>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_DMA_Abort_IT+0xe4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00a      	beq.n	80017a4 <HAL_DMA_Abort_IT+0x8c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_DMA_Abort_IT+0xe8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d102      	bne.n	800179e <HAL_DMA_Abort_IT+0x86>
 8001798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179c:	e00e      	b.n	80017bc <HAL_DMA_Abort_IT+0xa4>
 800179e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a2:	e00b      	b.n	80017bc <HAL_DMA_Abort_IT+0xa4>
 80017a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a8:	e008      	b.n	80017bc <HAL_DMA_Abort_IT+0xa4>
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	e005      	b.n	80017bc <HAL_DMA_Abort_IT+0xa4>
 80017b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b4:	e002      	b.n	80017bc <HAL_DMA_Abort_IT+0xa4>
 80017b6:	2310      	movs	r3, #16
 80017b8:	e000      	b.n	80017bc <HAL_DMA_Abort_IT+0xa4>
 80017ba:	2301      	movs	r3, #1
 80017bc:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_DMA_Abort_IT+0xec>)
 80017be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
    } 
  }
  return status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020008 	.word	0x40020008
 80017f0:	4002001c 	.word	0x4002001c
 80017f4:	40020030 	.word	0x40020030
 80017f8:	40020044 	.word	0x40020044
 80017fc:	40020058 	.word	0x40020058
 8001800:	4002006c 	.word	0x4002006c
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b08b      	sub	sp, #44	; 0x2c
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181a:	e169      	b.n	8001af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800181c:	2201      	movs	r2, #1
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 8158 	bne.w	8001aea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a9a      	ldr	r2, [pc, #616]	; (8001aa8 <HAL_GPIO_Init+0x2a0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d05e      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001844:	4a98      	ldr	r2, [pc, #608]	; (8001aa8 <HAL_GPIO_Init+0x2a0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d875      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800184a:	4a98      	ldr	r2, [pc, #608]	; (8001aac <HAL_GPIO_Init+0x2a4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d058      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001850:	4a96      	ldr	r2, [pc, #600]	; (8001aac <HAL_GPIO_Init+0x2a4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d86f      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001856:	4a96      	ldr	r2, [pc, #600]	; (8001ab0 <HAL_GPIO_Init+0x2a8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d052      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 800185c:	4a94      	ldr	r2, [pc, #592]	; (8001ab0 <HAL_GPIO_Init+0x2a8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d869      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001862:	4a94      	ldr	r2, [pc, #592]	; (8001ab4 <HAL_GPIO_Init+0x2ac>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d04c      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001868:	4a92      	ldr	r2, [pc, #584]	; (8001ab4 <HAL_GPIO_Init+0x2ac>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d863      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800186e:	4a92      	ldr	r2, [pc, #584]	; (8001ab8 <HAL_GPIO_Init+0x2b0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d046      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001874:	4a90      	ldr	r2, [pc, #576]	; (8001ab8 <HAL_GPIO_Init+0x2b0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d85d      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d82a      	bhi.n	80018d4 <HAL_GPIO_Init+0xcc>
 800187e:	2b12      	cmp	r3, #18
 8001880:	d859      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <HAL_GPIO_Init+0x80>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001903 	.word	0x08001903
 800188c:	080018dd 	.word	0x080018dd
 8001890:	080018ef 	.word	0x080018ef
 8001894:	08001931 	.word	0x08001931
 8001898:	08001937 	.word	0x08001937
 800189c:	08001937 	.word	0x08001937
 80018a0:	08001937 	.word	0x08001937
 80018a4:	08001937 	.word	0x08001937
 80018a8:	08001937 	.word	0x08001937
 80018ac:	08001937 	.word	0x08001937
 80018b0:	08001937 	.word	0x08001937
 80018b4:	08001937 	.word	0x08001937
 80018b8:	08001937 	.word	0x08001937
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001937 	.word	0x08001937
 80018c4:	08001937 	.word	0x08001937
 80018c8:	08001937 	.word	0x08001937
 80018cc:	080018e5 	.word	0x080018e5
 80018d0:	080018f9 	.word	0x080018f9
 80018d4:	4a79      	ldr	r2, [pc, #484]	; (8001abc <HAL_GPIO_Init+0x2b4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018da:	e02c      	b.n	8001936 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e029      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	3304      	adds	r3, #4
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e024      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	3308      	adds	r3, #8
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e01f      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	330c      	adds	r3, #12
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e01a      	b.n	8001938 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800190a:	2304      	movs	r3, #4
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e013      	b.n	8001938 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001918:	2308      	movs	r3, #8
 800191a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	611a      	str	r2, [r3, #16]
          break;
 8001922:	e009      	b.n	8001938 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001924:	2308      	movs	r3, #8
 8001926:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	615a      	str	r2, [r3, #20]
          break;
 800192e:	e003      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x130>
          break;
 8001936:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d801      	bhi.n	8001942 <HAL_GPIO_Init+0x13a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_Init+0x13e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2bff      	cmp	r3, #255	; 0xff
 800194c:	d802      	bhi.n	8001954 <HAL_GPIO_Init+0x14c>
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x152>
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	3b08      	subs	r3, #8
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	210f      	movs	r1, #15
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	401a      	ands	r2, r3
 800196c:	6a39      	ldr	r1, [r7, #32]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80b1 	beq.w	8001aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_GPIO_Init+0x2b8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2b8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_GPIO_Init+0x2b8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a0:	4a48      	ldr	r2, [pc, #288]	; (8001ac4 <HAL_GPIO_Init+0x2bc>)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a40      	ldr	r2, [pc, #256]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_GPIO_Init+0x1ec>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <HAL_GPIO_Init+0x2c4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00d      	beq.n	80019f0 <HAL_GPIO_Init+0x1e8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <HAL_GPIO_Init+0x2c8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d007      	beq.n	80019ec <HAL_GPIO_Init+0x1e4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3d      	ldr	r2, [pc, #244]	; (8001ad4 <HAL_GPIO_Init+0x2cc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_GPIO_Init+0x1e0>
 80019e4:	2303      	movs	r3, #3
 80019e6:	e006      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019f4:	2300      	movs	r3, #0
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a06:	492f      	ldr	r1, [pc, #188]	; (8001ac4 <HAL_GPIO_Init+0x2bc>)
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	492c      	ldr	r1, [pc, #176]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4928      	ldr	r1, [pc, #160]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	491e      	ldr	r1, [pc, #120]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4918      	ldr	r1, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	4914      	ldr	r1, [pc, #80]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d021      	beq.n	8001adc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e021      	b.n	8001aea <HAL_GPIO_Init+0x2e2>
 8001aa6:	bf00      	nop
 8001aa8:	10320000 	.word	0x10320000
 8001aac:	10310000 	.word	0x10310000
 8001ab0:	10220000 	.word	0x10220000
 8001ab4:	10210000 	.word	0x10210000
 8001ab8:	10120000 	.word	0x10120000
 8001abc:	10110000 	.word	0x10110000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40010800 	.word	0x40010800
 8001acc:	40010c00 	.word	0x40010c00
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40011400 	.word	0x40011400
 8001ad8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4909      	ldr	r1, [pc, #36]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f ae8e 	bne.w	800181c <HAL_GPIO_Init+0x14>
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	372c      	adds	r7, #44	; 0x2c
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e272      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d112      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x12c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d168      	bne.n	8001c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e24c      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x76>
 8001ba8:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a7f      	ldr	r2, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e02e      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xbc>
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a71      	ldr	r2, [pc, #452]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6e      	ldr	r2, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a67      	ldr	r2, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe ffd2 	bl	8000bc4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7fe ffce 	bl	8000bc4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e200      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe4>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe ffbe 	bl	8000bc4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7fe ffba 	bl	8000bc4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1ec      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x10c>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1c0      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4939      	ldr	r1, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	e03a      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe ff73 	bl	8000bc4 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7fe ff6f 	bl	8000bc4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e1a1      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff52 	bl	8000bc4 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7fe ff4e 	bl	8000bc4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e180      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d019      	beq.n	8001d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe ff32 	bl	8000bc4 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe ff2e 	bl	8000bc4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e160      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 face 	bl	8002324 <RCC_Delay>
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7fe ff18 	bl	8000bc4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7fe ff14 	bl	8000bc4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d908      	bls.n	8001db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e146      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	42420000 	.word	0x42420000
 8001db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b92      	ldr	r3, [pc, #584]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e9      	bne.n	8001d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a6 	beq.w	8001f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a87      	ldr	r2, [pc, #540]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b82      	ldr	r3, [pc, #520]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7e      	ldr	r2, [pc, #504]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7fe fed5 	bl	8000bc4 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe fed1 	bl	8000bc4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e103      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b75      	ldr	r3, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x312>
 8001e44:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a6e      	ldr	r2, [pc, #440]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e02d      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x334>
 8001e5a:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a66      	ldr	r2, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	e01c      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x356>
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a60      	ldr	r2, [pc, #384]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	4b5e      	ldr	r3, [pc, #376]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e96:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a5a      	ldr	r2, [pc, #360]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b58      	ldr	r3, [pc, #352]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a57      	ldr	r2, [pc, #348]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fe85 	bl	8000bc4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fe81 	bl	8000bc4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0b1      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ee      	beq.n	8001ebe <HAL_RCC_OscConfig+0x37e>
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fe6f 	bl	8000bc4 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe fe6b 	bl	8000bc4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e09b      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	4b40      	ldr	r3, [pc, #256]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ee      	bne.n	8001eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8087 	beq.w	8002036 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d061      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d146      	bne.n	8001fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fe3f 	bl	8000bc4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe fe3b 	bl	8000bc4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e06d      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4921      	ldr	r1, [pc, #132]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a19      	ldr	r1, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	430b      	orrs	r3, r1
 8001f96:	491b      	ldr	r1, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fe0f 	bl	8000bc4 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fe0b 	bl	8000bc4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e03d      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x46a>
 8001fc8:	e035      	b.n	8002036 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fdf8 	bl	8000bc4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fdf4 	bl	8000bc4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e026      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x498>
 8001ff6:	e01e      	b.n	8002036 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e019      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x500>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	429a      	cmp	r2, r3
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d0      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4965      	ldr	r1, [pc, #404]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d040      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d115      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e073      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06b      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fd46 	bl	8000bc4 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fd42 	bl	8000bc4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e053      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d210      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4922      	ldr	r1, [pc, #136]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1cc>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_ClockConfig+0x1d0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fca4 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	08003278 	.word	0x08003278
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x30>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x36>
 8002246:	e027      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	e027      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0c5b      	lsrs	r3, r3, #17
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800227a:	fb03 f202 	mul.w	r2, r3, r2
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e004      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	613b      	str	r3, [r7, #16]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800229a:	613b      	str	r3, [r7, #16]
      break;
 800229c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229e:	693b      	ldr	r3, [r7, #16]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	08003290 	.word	0x08003290
 80022b8:	080032a0 	.word	0x080032a0
 80022bc:	003d0900 	.word	0x003d0900

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d8:	f7ff fff2 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08003288 	.word	0x08003288

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002300:	f7ff ffde 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	08003288 	.word	0x08003288

08002324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <RCC_Delay+0x34>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <RCC_Delay+0x38>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a5b      	lsrs	r3, r3, #9
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002340:	bf00      	nop
  }
  while (Delay --);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	60fa      	str	r2, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <RCC_Delay+0x1c>
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000000 	.word	0x20000000
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d07d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	61d3      	str	r3, [r2, #28]
 8002398:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d118      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b4:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a42      	ldr	r2, [pc, #264]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c0:	f7fe fc00 	bl	8000bc4 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	e008      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe fbfc 	bl	8000bc4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e06d      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02e      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d027      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002414:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800241a:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe fbcb 	bl	8000bc4 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fbc7 	bl	8000bc4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e036      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4917      	ldr	r1, [pc, #92]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	4313      	orrs	r3, r2
 8002464:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	490b      	ldr	r1, [pc, #44]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42420440 	.word	0x42420440

080024cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	f200 808a 	bhi.w	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d045      	beq.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d075      	beq.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002502:	e082      	b.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002504:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800250a:	4b45      	ldr	r3, [pc, #276]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d07b      	beq.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a41      	ldr	r2, [pc, #260]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002548:	4a38      	ldr	r2, [pc, #224]	; (800262c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	e004      	b.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002570:	d102      	bne.n	8002578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	61bb      	str	r3, [r7, #24]
      break;
 8002576:	e04a      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4a2d      	ldr	r2, [pc, #180]	; (8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
      break;
 8002586:	e042      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002598:	d108      	bne.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80025a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	e01f      	b.n	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b6:	d109      	bne.n	80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80025c4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e00f      	b.n	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025d6:	d11c      	bne.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d016      	beq.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80025e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025e8:	61bb      	str	r3, [r7, #24]
      break;
 80025ea:	e012      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80025ec:	e011      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025ee:	f7ff fe85 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0b9b      	lsrs	r3, r3, #14
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	3301      	adds	r3, #1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	61bb      	str	r3, [r7, #24]
      break;
 8002608:	e004      	b.n	8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002612:	bf00      	nop
    }
  }
  return (frequency);
 8002614:	69bb      	ldr	r3, [r7, #24]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	080032a4 	.word	0x080032a4
 8002628:	080032b4 	.word	0x080032b4
 800262c:	007a1200 	.word	0x007a1200
 8002630:	003d0900 	.word	0x003d0900
 8002634:	aaaaaaab 	.word	0xaaaaaaab

08002638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e042      	b.n	80026d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe f9a6 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2224      	movs	r2, #36	; 0x24
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800267a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fd11 	bl	80030a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d121      	bne.n	8002736 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_UART_Transmit_IT+0x26>
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e01a      	b.n	8002738 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2221      	movs	r2, #33	; 0x21
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002730:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	4613      	mov	r3, r2
 800274e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b20      	cmp	r3, #32
 800275a:	d112      	bne.n	8002782 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_UART_Receive_IT+0x26>
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e00b      	b.n	8002784 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	461a      	mov	r2, r3
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fabf 	bl	8002cfc <UART_Start_Receive_IT>
 800277e:	4603      	mov	r3, r0
 8002780:	e000      	b.n	8002784 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0ba      	sub	sp, #232	; 0xe8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_UART_IRQHandler+0x66>
 80027de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fb9c 	bl	8002f28 <UART_Receive_IT>
      return;
 80027f0:	e25b      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80de 	beq.w	80029b8 <HAL_UART_IRQHandler+0x22c>
 80027fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80d1 	beq.w	80029b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_UART_IRQHandler+0xae>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800283a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_UART_IRQHandler+0xd2>
 8002846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0202 	orr.w	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_UART_IRQHandler+0xf6>
 800286a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d011      	beq.n	80028b2 <HAL_UART_IRQHandler+0x126>
 800288e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800289a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f043 0208 	orr.w	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 81f2 	beq.w	8002ca0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_UART_IRQHandler+0x14e>
 80028c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fb27 	bl	8002f28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <HAL_UART_IRQHandler+0x17a>
 80028fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d04f      	beq.n	80029a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa31 	bl	8002d6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d041      	beq.n	800299e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002946:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800294a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002952:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800295e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1d9      	bne.n	800291a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d013      	beq.n	8002996 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	4a7e      	ldr	r2, [pc, #504]	; (8002b6c <HAL_UART_IRQHandler+0x3e0>)
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fecc 	bl	8001718 <HAL_DMA_Abort_IT>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002990:	4610      	mov	r0, r2
 8002992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	e00e      	b.n	80029b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f99c 	bl	8002cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299c:	e00a      	b.n	80029b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f998 	bl	8002cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	e006      	b.n	80029b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f994 	bl	8002cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029b2:	e175      	b.n	8002ca0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	bf00      	nop
    return;
 80029b6:	e173      	b.n	8002ca0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f040 814f 	bne.w	8002c60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8148 	beq.w	8002c60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8141 	beq.w	8002c60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80b6 	beq.w	8002b70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8145 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a22:	429a      	cmp	r2, r3
 8002a24:	f080 813e 	bcs.w	8002ca4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	f000 8088 	beq.w	8002b4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	330c      	adds	r3, #12
 8002a64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1d9      	bne.n	8002a3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a92:	e853 3f00 	ldrex	r3, [r3]
 8002a96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ab4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e1      	bne.n	8002a88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ace:	e853 3f00 	ldrex	r3, [r3]
 8002ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ae8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002aee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e3      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1c:	f023 0310 	bic.w	r3, r3, #16
 8002b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e3      	bne.n	8002b0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fdab 	bl	80016a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8bf 	bl	8002ce6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b68:	e09c      	b.n	8002ca4 <HAL_UART_IRQHandler+0x518>
 8002b6a:	bf00      	nop
 8002b6c:	08002e33 	.word	0x08002e33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 808e 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8089 	beq.w	8002ca8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bba:	647a      	str	r2, [r7, #68]	; 0x44
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e3      	bne.n	8002b96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	e853 3f00 	ldrex	r3, [r3]
 8002bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bf2:	633a      	str	r2, [r7, #48]	; 0x30
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e3      	bne.n	8002bce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0310 	bic.w	r3, r3, #16
 8002c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c38:	61fa      	str	r2, [r7, #28]
 8002c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	69b9      	ldr	r1, [r7, #24]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	617b      	str	r3, [r7, #20]
   return(result);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e3      	bne.n	8002c14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c56:	4619      	mov	r1, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f844 	bl	8002ce6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c5e:	e023      	b.n	8002ca8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_UART_IRQHandler+0x4f4>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f8ee 	bl	8002e5a <UART_Transmit_IT>
    return;
 8002c7e:	e014      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00e      	beq.n	8002caa <HAL_UART_IRQHandler+0x51e>
 8002c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f92d 	bl	8002ef8 <UART_EndTransmit_IT>
    return;
 8002c9e:	e004      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
    return;
 8002ca0:	bf00      	nop
 8002ca2:	e002      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ca8:	bf00      	nop
  }
}
 8002caa:	37e8      	adds	r7, #232	; 0xe8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2222      	movs	r2, #34	; 0x22
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0220 	orr.w	r2, r2, #32
 8002d60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b095      	sub	sp, #84	; 0x54
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	330c      	adds	r3, #12
 8002d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d96:	643a      	str	r2, [r7, #64]	; 0x40
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e5      	bne.n	8002d76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3314      	adds	r3, #20
 8002dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d119      	bne.n	8002e1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e06:	61ba      	str	r2, [r7, #24]
 8002e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	6979      	ldr	r1, [r7, #20]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	e841 2300 	strex	r3, r2, [r1]
 8002e12:	613b      	str	r3, [r7, #16]
   return(result);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1e5      	bne.n	8002de6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e28:	bf00      	nop
 8002e2a:	3754      	adds	r7, #84	; 0x54
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff ff41 	bl	8002cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b21      	cmp	r3, #33	; 0x21
 8002e6c:	d13e      	bne.n	8002eec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d114      	bne.n	8002ea2 <UART_Transmit_IT+0x48>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d110      	bne.n	8002ea2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	1c9a      	adds	r2, r3, #2
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	621a      	str	r2, [r3, #32]
 8002ea0:	e008      	b.n	8002eb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	1c59      	adds	r1, r3, #1
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6211      	str	r1, [r2, #32]
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fec9 	bl	8002cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b22      	cmp	r3, #34	; 0x22
 8002f3a:	f040 80ae 	bne.w	800309a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d117      	bne.n	8002f78 <UART_Receive_IT+0x50>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d113      	bne.n	8002f78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	1c9a      	adds	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
 8002f76:	e026      	b.n	8002fc6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	d007      	beq.n	8002f9c <UART_Receive_IT+0x74>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <UART_Receive_IT+0x82>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e008      	b.n	8002fbc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d15d      	bne.n	8003096 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0220 	bic.w	r2, r2, #32
 8002fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	2b01      	cmp	r3, #1
 800301e:	d135      	bne.n	800308c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	613b      	str	r3, [r7, #16]
   return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f023 0310 	bic.w	r3, r3, #16
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003046:	623a      	str	r2, [r7, #32]
 8003048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	61bb      	str	r3, [r7, #24]
   return(result);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e5      	bne.n	8003026 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d10a      	bne.n	800307e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fe2e 	bl	8002ce6 <HAL_UARTEx_RxEventCallback>
 800308a:	e002      	b.n	8003092 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fe18 	bl	8002cc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e002      	b.n	800309c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3730      	adds	r7, #48	; 0x30
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030de:	f023 030c 	bic.w	r3, r3, #12
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <UART_SetConfig+0x114>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d103      	bne.n	8003114 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800310c:	f7ff f8f6 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	e002      	b.n	800311a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7ff f8de 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8003118:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	4a22      	ldr	r2, [pc, #136]	; (80031bc <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	0119      	lsls	r1, r3, #4
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009a      	lsls	r2, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <UART_SetConfig+0x118>)
 8003152:	fba3 0302 	umull	r0, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2064      	movs	r0, #100	; 0x64
 800315a:	fb00 f303 	mul.w	r3, r0, r3
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	3332      	adds	r3, #50	; 0x32
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <UART_SetConfig+0x118>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003170:	4419      	add	r1, r3
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fbb2 f2f3 	udiv	r2, r2, r3
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <UART_SetConfig+0x118>)
 800318a:	fba3 0302 	umull	r0, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2064      	movs	r0, #100	; 0x64
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <UART_SetConfig+0x118>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	440a      	add	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40013800 	.word	0x40013800
 80031bc:	51eb851f 	.word	0x51eb851f

080031c0 <memset>:
 80031c0:	4603      	mov	r3, r0
 80031c2:	4402      	add	r2, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <__libc_init_array>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	2600      	movs	r6, #0
 80031d4:	4d0c      	ldr	r5, [pc, #48]	; (8003208 <__libc_init_array+0x38>)
 80031d6:	4c0d      	ldr	r4, [pc, #52]	; (800320c <__libc_init_array+0x3c>)
 80031d8:	1b64      	subs	r4, r4, r5
 80031da:	10a4      	asrs	r4, r4, #2
 80031dc:	42a6      	cmp	r6, r4
 80031de:	d109      	bne.n	80031f4 <__libc_init_array+0x24>
 80031e0:	f000 f81a 	bl	8003218 <_init>
 80031e4:	2600      	movs	r6, #0
 80031e6:	4d0a      	ldr	r5, [pc, #40]	; (8003210 <__libc_init_array+0x40>)
 80031e8:	4c0a      	ldr	r4, [pc, #40]	; (8003214 <__libc_init_array+0x44>)
 80031ea:	1b64      	subs	r4, r4, r5
 80031ec:	10a4      	asrs	r4, r4, #2
 80031ee:	42a6      	cmp	r6, r4
 80031f0:	d105      	bne.n	80031fe <__libc_init_array+0x2e>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f8:	4798      	blx	r3
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7ee      	b.n	80031dc <__libc_init_array+0xc>
 80031fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003202:	4798      	blx	r3
 8003204:	3601      	adds	r6, #1
 8003206:	e7f2      	b.n	80031ee <__libc_init_array+0x1e>
 8003208:	080032b8 	.word	0x080032b8
 800320c:	080032b8 	.word	0x080032b8
 8003210:	080032b8 	.word	0x080032b8
 8003214:	080032bc 	.word	0x080032bc

08003218 <_init>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr

08003224 <_fini>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr
